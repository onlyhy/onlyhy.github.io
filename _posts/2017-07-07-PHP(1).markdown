---
layout: post
title: "关于PHP(1)"
date: 2017-07-07 12:00:00 +00:00
categories: PHP
author: onlyhy
---  
<ul>
    <li>
        <a href="#yf">语法</a>
    </li>
    <li>
        <a href="#bl">变量</a>
    </li>
    <li>
        <a href="#cj">超级全局变量</a>
    </li>
    <li>
        <a href="#ec">echo和print语句  </a>
    </li>
    <li>
        <a href="#sj">数据类型</a>
    </li>
    <li>
        <a href="#cl">常量</a>
    </li>
    <li>
        <a href="#zf">字符串变量</a>
    </li>
    <li>
        <a href="#ys">运算符</a>
    </li>
    <li>
        <a href="#sz">数组</a>
    </li>
     <li>
        <a href="#szp">数组排序</a>
    </li>
    <li>
        <a href="#xh">循环</a>
    </li>
    <li>
        <a href="#hs">函数</a>
    </li>
    <li>
        <a href="#ms">魔术变量</a>
    </li>
    <li>
        <a href="#mm">命名空间</a>
    </li>
     <li>
        <a href="#mx">面向对象</a>
    </li>


</ul>
### PHP(Hypertext Preprocessor)超文本预处理器  
  PHP文件包含文本、HTML、JS代码和PHP代码，在服务器上执行，以纯HTML形式返回给浏览器。  

### <span id="yf">语法  </span>
   PHP脚本可以放在文档中任何位置

    <?php
    // PHP 代码
    ?>  

   每个代码行都必须以分号结束。  
   两种在浏览器输出文本的基础指令：echo和print  
   //单行注释 /**/多行注释  

### <span id="bl">变量 </span>  
   规则：  
   1. 变量以$符号开始  
   2. 必须以字母或下划线字符开始  
   3. 只能包含字母、数字、字符、下划线  
   4. 不能包含空格  
   5. 区分大小写  

   没有声明变量的命令，在第一次赋值给它的时候变量被创建。  
   OHP是弱类型语言，不必声明该变量的数据类型，PHP会根据变量的值，自动把变量转换为正确的数据类型。  

#### 作用域  
   变量的作用域是脚本中变量可被引用/使用的部分  
   4种作用域：local,global.static,parameter  
  
   global关键字用于函数内访问全局变量，所有全局变量存储在一个名为$GLOBALS[index]数组中，index保存变量的名称，可以在函数内直接访问如$GLOBALS['y']。  

   static关键字，当希望局部变量在函数完成时不要被删除，则在第一次声明变量时用static关键字，每次调用该函数，该变量都会保留前一次被调用时的值。  

### <span id="cj">超级全局变量 </span> 
   在PHP 4.1.0之后被启用, 是PHP系统中自带的变量，在一个脚本的全部作用域中都可用，PHP中预定义了几个。  

#### $GLOBALS  
   是一个包含了全部变量的全局组合数组。变量的名字就是数组的键。   

    <?php 
    $x = 75; 
    $y = 25;
    function addition() 
    { 
    $GLOBALS['z'] = $GLOBALS['x'] + $GLOBALS['y']; 
    }
    addition(); 
    echo $z; 
    ?>

#### $_SERVER  
   是一个包含了如头信息(header)、路径(path)、以及脚本位置(script locations)等等信息的数组  

    <?php 
    echo $_SERVER['PHP_SELF'];
    echo "<br>";
    echo $_SERVER['SERVER_NAME'];
    ?>  


#### $_REQUEST  
   用于收集HTML表单提交的数据

    <form method="post" action="<?php echo $_SERVER['PHP_SELF'];?>">
    Name: <input type="text" name="fname">
    <input type="submit">
    </form>
    <?php 
    $name = $_REQUEST['fname']; 
    echo $name; 
    ?>  

#### $_POST  
   被广泛应用于收集表单数据，在HTML form标签的指定该属性："method="post"  

    <form method="post" action="<?php echo $_SERVER['PHP_SELF'];?>">
    Name: <input type="text" name="fname">
    <input type="submit">
    </form>  
    <?php 
    $name = $_POST['fname']; 
    echo $name; 
    ?>  

#### $_GET
   被广泛应用于收集表单数据，在HTML form标签的指定该属性："method="get"，也可以收集URL中发送的数据  

    <html>
    <body>
    <a href="test_get.php?subject=PHP&web=runoob.com">Test $GET</a>
    </body>
    </html>  
    //在test_get.php中  
    <?php 
    echo "Study " . $_GET['subject'] . " at " . $_GET['web'];
    ?>



### <span id="ec">echo和print语句 </span> 
   echo：可以输出一个或多个字符串，速度快,echo或者echo()，字符串可以包含HTML标签  
   print：只允许输出一个字符串，返回值总为 1,print或print()  

### <span id="sj">数据类型  </span> 
   String（字符串）, Integer（整型）八进制、十进制、十六进制, Float（浮点型）是带小数部分的数字或指数形式, Boolean（布尔型）, Array（数组）, Object（对象）必须用class关键字声明类对象,NULL(空值)  

### <span id="cl">常量</span>  
   值被定义后，不能改变，有字母、下划线、数字组成，默认是全局的
   使用define()设置常量

    define ( string $name , mixed $value [, bool $case_insensitive = false ] )  

   name:必选参数，常量名  
   value:必选参数，常量值  
   case_insensitive:可选参数，true则大小写不敏感，默认敏感  

### <span id="zf">字符串变量 </span>  
   赋一个文本值给变量时，请记得给文本值加上单引号或者双引号。  
#### 并置运算符  
   （.）用于把两个字符串链接起来  

    <?php 
    $txt1="Hello world!"; 
    $txt2="What a nice day!"; 
    echo $txt1 . " " . $txt2; 
    ?>  

#### strlen()函数
   返回字符串的长度（字符数）  

#### strpos()函数  
   在字符串内查找一个字符或一段指定的文本，如果在字符串中找到匹配，该函数会返回第一个匹配的字符位置。如果未找到匹配，则返回 FALSE  
   字符串的第一个字符的位置是0而不是1  ！！！ 

### <span id="ys">运算符 </span> 
  大部分运算符常见。  
  PHP7+ 版本新增整除运算符 intdiv()  

    <?php
    var_dump(intdiv(10, 3));
    ?>  

   x and y：与 ，x or y：或，x xor y 异或  
   x<>y 不等于，x!== 不绝对等于不恒等，x===y 恒等  

#### 三元运算符  
   
    (expr1) ? (expr2) : (expr3)   

   PHP 5.3 起，可以省略三元运算符中间那部分。表达式 expr1 ?: expr3 在 expr1 求值为 TRUE 时返回 expr1，否则返回 expr3  
   PHP7+ 版本多了一个 NULL 合并运算符  

    <?php
    // 如果 $_GET['user'] 不存在返回 'nobody'，否则返回 $_GET['user'] 的值
    $username = $_GET['user'] ?? 'nobody';
    // 类似的三元运算符
    $username = isset($_GET['user']) ? $_GET['user'] : 'nobody';
    ?>  

#### 组合运算符  

      $c = $a <=> $b;  
 
   如果 $a > $b, $c 的值为 1，如果 $a == $b, $c 的值为 0，如果 $a < $b, $c 的值为-1  

#### 优先级  
   括（号）、单（操作数）、算（术）、移（位）、关（系）；位（运算符）、逻（辑）、条（件）、赋（值）、逗（号）

### <span id="sz">数组 </span> 
   array();三种类型的数组：
   数值、关联、多维数组。  

#### 数值数组  
   自动分配 ID 键（ID 键总是从 0 开始）：

    $cars=array("Volvo","BMW","Toyota");  

   人工分配ID键  

    $cars[0]="Volvo";
    $cars[1]="BMW";
    $cars[2]="Toyota";  

   count()函数返回数组的长度  

    <?php
    $cars=array("Volvo","BMW","Toyota");
    echo count($cars);
    ?>  

   遍历用for循环  

#### 关联数组  
   使用分配给数组的指定键的数组  

    $age=array("Peter"=>"35","Ben"=>"37","Joe"=>"43");
    //或者
    $age['Peter']="35";
    $age['Ben']="37";
    $age['Joe']="43";  
    <?php
    $age=array("Peter"=>"35","Ben"=>"37","Joe"=>"43");
    echo "Peter is " . $age['Peter'] . " years old.";
    ?>  

   遍历用foreach循环，

    foreach($age as $x=>$x_value)
    {
        echo "Key=" . $x . ", Value=" . $x_value;
        echo "<br>";
    }  

### <span id="szp"> 数组排序  </span>

#### sort() - 对数组进行升序排列  
   
    <?php
    $cars=array("Volvo","BMW","Toyota");
    sort($cars);
    ?>  

#### rsort() - 对数组进行降序排列  

    <?php
    $numbers=array(4,6,2,22,11);
    rsort($numbers);
    ?>

#### asort() - 根据数组的值，对数组进行升序排列  

    <?php
    $age=array("Peter"=>"35","Ben"=>"37","Joe"=>"43");
    asort($age);
    print_r($age);
    ?>

输出结果：Array  
(  
[Peter] => 35  
[Ben] => 37  
[Joe] => 43  
)  

#### ksort() - 根据数组的键，对数组进行升序排列  

###  <span id="xh">循环 </span> 
   while，do...while，for,foreach  

#### foreach  
   用于遍历数组，每一次循环，当前数组元素的值就会被赋值给$value变量，进行下一次循环时，将看到数组中的下一个值。

    <?php
    $x=array("one","two","three");
    foreach ($x as $value)
    {
    echo $value . "<br>";
    }
    ?>  
    //输出：
    one  
    two  
    three  


### <span id="hs">函数 </span> 
   函数的名称应该提示出它的功能，名称以字母或下划线开头（不能以数字）

    function functionName($参数一，$参数二)
    {
    要执行的代码;
    return ...; //需要让函数返回一个值，用return  
    }  

### <span id="ms">魔术变量 </span> 
   八个魔术变量的值随着它们在代码中的位置改变而改变  
   * __LINE__  ：当前行号 
   * __FILE__  ：文件的完整路劲和文件名  
   * __DIR__   ：文件所在目录  
   * __FUNCTION__ ：函数名称  
   * __CLASS__ ：类的名称  
   * __TRAIT__ ：Trait的名字，Trait名包括其被声明的作用区域  
   * __METHOD__：类的方法名，返回该方法被定义时的名字（区分大小写）  
   * __NAMESPACE__：当前命名空间的名称（区分大小写）

### <span id="mm">命名空间 </span> 
   通过关键字namespace 来声明，如果一个文件中包含命名空间，它必须在其它所有代码之前声明命名空间。  
   在声明命名空间之前唯一合法的代码是用于定义源文件编码方式的 declare 语句

    declare(encoding='UTF-8'); //定义多个命名空间和不包含在命名空间中的代码

   可以定义多个不同的命名空间  

    < ?php  
    namespace MyProject1;  
    // MyProject1 命名空间中的PHP代码  
    namespace MyProject2;  
    // MyProject2 命名空间中的PHP代码    
    // 另一种语法
    namespace MyProject3 {  
     // MyProject3 命名空间中的PHP代码    
    }  
    ?> 

#### 子命名空间  

   创建了常量 MyProject\Sub\Level\CONNECT_OK，类 MyProject\Sub\Level\Connection 和函数 MyProject\Sub\Level\Connect

    <?php
    namespace MyProject\Sub\Level;  //声明分层次的单个命名空间
    const CONNECT_OK = 1;
    class Connection { /* ... */ }
    function Connect() { /* ... */  }
    ?>  

#### 命名空间使用  
   命名空间中的类名可以通过三种方式引用：  
   1. 非限定名称，不包含前缀的类名称
   2. 限定名称，包含前缀的名称
   3. 完全限定名称，包含了全局前缀操作符的名称   

访问任意全局类、函数或常量，都可以使用完全限定名称，如\strlen() 或 \Exception 或 \INI_ALL  

    <?php
    namespace Foo;
    function strlen() {}
    const INI_ALL = 3;
    class Exception {}
    $a = \strlen('hi'); // 调用全局函数strlen
    $b = \INI_ALL; // 访问全局常量 INI_ALL
    $c = new \Exception('error'); // 实例化全局类 Exception
    ?>  

   动态访问元素必须使用完全限定名称（包括命名空间前缀的类名称），因为在动态的类名称、函数名称或常量名称中，限定名称和完全限定名称没有区别，因此其前导的反斜杠是不必要的

#### namespace关键字和__NAMESPACE__常量  
   都是抽象的访问当前命名空间内部元素的方法，__NAMESPACE__常量包含当前命名空间名称的字符串，没有代码则包含一个空的字符串。关键字 namespace 可用来显式访问当前命名空间或子命名空间中的元素。它等价于类中的 self 操作符。  

#### 使用命名空间：别名 /导入  
   有两种方法：为类名称使用别名，或为命名空间名称使用别名，PHP不支持导入函数或常量。导入只影响非限定名称和限定名称。完全限定名称由于是确定的，故不受导入的影响。
   PHP中，别名通过use实现，一行可包含多个use语句

    <?php
    namespace foo;
    use My\Full\Classname as Another;
    // 下面的例子与 use My\Full\NSname as NSname 相同
    use My\Full\NSname;
    // 导入一个全局类
    use \ArrayObject;
    $obj = new namespace\Another; // 实例化 foo\Another 对象
    $obj = new Another; // 实例化 My\Full\Classname　对象
    NSname\subns\func(); // 调用函数 My\Full\NSname\subns\func
    $a = new ArrayObject(array(1)); // 实例化 ArrayObject 对象
    // 如果不使用 "use \ArrayObject" ，则实例化一个 foo\ArrayObject 对象
    ?>

#### 使用命名空间：后备全局函数/常量  
   在一个命名空间中，当 PHP 遇到一个非限定的类、函数或常量名称时，它使用不同的优先策略来解析该名称。类名称总是解析到当前命名空间中的名称。因此在访问系统内部或不包含在命名空间中的类名称时，必须使用完全限定名称。  
   对于函数和常量来说，如果当前命名空间中不存在该函数或常量，PHP 会退而使用全局空间中的函数或常量。

#### 全局空间  
   如果没有定义任何命名空间，所有的类与函数的定义都是在全局空间，在名称前加上前缀 \ 表示该名称是全局空间中的名称，即使该名称位于其它的命名空间中时也是如此

#### 命名空间的顺序  
   使用类的时候，类的寻找路径很容易出错。  

   名称解析：
  1. 对完全限定名称的函数，类和常量的调用在编译时解析。例如 new \A\B 解析为类 A\B。  
  
  2. 所有的非限定名称和限定名称（非完全限定名称）根据当前的导入规则在编译时进行转换。例如，如果命名空间 A\B\C 被导入为 C，那么对 C\D\e() 的调用就会被转换为 A\B\C\D\e()。  
  
  3. 在命名空间内部，所有的没有根据导入规则转换的限定名称均会在其前面加上当前的命名空间名称。例如，在命名空间 A\B 内部调用 C\D\e()，则 C\D\e() 会被转换为 A\B\C\D\e() 。  
  
  4. 非限定类名根据当前的导入规则在编译时转换（用全名代替短的导入名称）。例如，如果命名空间 A\B\C 导入为C，则 new C() 被转换为 new A\B\C() 。  
  
  5. 在命名空间内部（例如A\B），对非限定名称的函数调用是在运行时解析的。例如对函数 foo() 的调用是这样解析的：
     * 在当前命名空间中查找名为 A\B\foo() 的函数
     * 尝试查找并调用 全局(global) 空间中的函数 foo()。  
     
  6. 在命名空间（例如A\B）内部对非限定名称或限定名称类（非完全限定名称）的调用是在运行时解析的。下面是调用 new C() 及 new D\E() 的解析过程： new C()的解析:
     * 在当前命名空间中查找A\B\C类。
     * 尝试自动装载类A\B\C。
  new D\E()的解析:
     * 在类名称前面加上当前命名空间名称变成：A\B\D\E，然后查找该类。
     * 尝试自动装载类 A\B\D\E。
     * 为了引用全局命名空间中的全局类，必须使用完全限定名称 new \C()。

### <span id="mx">面向对象</span>  

#### 类定义  
   
    <?php
    class phpClass {
      var $var1;
      var $var2 = "constant string";
      function myfunc ($arg1, $arg2) {
         [..]
      }
      [..]
    }
    ?>

#### 创建对象  
   类创建后，可以使用 new 运算符来实例化该类的对象  

    $runoob = new Site;

#### 调用成员方法  
   该对象的成员方法只能操作该对象的成员变量  

    <?php 
    class Site { 
      /* 成员变量 */ 
      var $url; 
      var $title; 
      /* 成员函数 */ 
      function setUrl($par){ 
         $this->url = $par; 
      } 
      function getUrl(){ 
         echo $this->url . PHP_EOL; //换行
      } 
       function setTitle($par){ 
         $this->title = $par; 
      } 
      function getTitle(){ 
         echo $this->title . PHP_EOL; 
      }
    } 
    $runoob = new Site; 
    // 调用成员函数，设置标题和URL 
    $runoob->setTitle( "菜鸟教程" ); 
    $runoob->setUrl( 'www.runoob.com' ); 
    // 调用成员函数，获取标题和URL 
    $runoob->getTitle(); 
    $runoob->getUrl(); 
    ?>  

#### 构造函数  
   主要用来在创建对象时初始化对象， 为对象成员变量赋初始值，总与new运算符一起使用在创建对象的语句中
   在类中定义一个方法作为构造函数：

    void __construct ([ mixed $args [, $... ]] )  

   在上面的例子中我们就可以通过构造方法来初始化 $url 和 $title 变量

    function __construct( $par1, $par2 ) {
       $this->url = $par1;
       $this->title = $par2;
    }  

   不需要再调用 setTitle 和 setUrl 方法  

    $runoob = new Site('www.runoob.com', '菜鸟教程');  
    $runoob->getTitle();  
    $runoob->getUrl(); 


#### 析构函数(destructor)   
   与构造函数相反，当对象结束其生命周期时（例如对象所在的函数已调用完毕），系统自动执行析构函数，格式： 

    void __destruct ( void )


    <?php
    class MyDestructableClass {
       function __construct() {
           print "构造函数\n";
           $this->name = "MyDestructableClass";
       }
       function __destruct() {
           print "销毁 " . $this->name . "\n";
       }
    }
    $obj = new MyDestructableClass();
    ?>

结果：构造函数  
    销毁 MyDestructableClass

#### 继承  
   使用关键字extends来继承一个类，不支持多继承  
   class Child extends Parent {
   // 代码部分，可扩展功能  
}
#### 方法重写  
   从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写  

#### 访问控制  
   通过在前面添加关键字 public（公有），protected（受保护）或 private（私有）  
   * public（公有）：公有的类成员可以在任何地方被访问
   * protected（受保护）：受保护的类成员则可以被其自身以及其子类和父类访问  
   * private（私有）：私有的类成员则只能被其定义所在的类访问

   继承可以对public,protected重定义，private不行  

#### 接口  
   通过interface关键字定义，指定某个类必须实现哪些方法，但不需要定义这些方法的具体内容，方法必须是公有。要实现一个接口，使用 implements 操作符。类中必须实现接口中定义的所有方法，类可以实现多个接口，用逗号来分隔多个接口的名称。  

    <?php
    // 声明一个'iTemplate'接口
    interface iTemplate
    {
        public function setVariable($name, $var);
        public function getHtml($template);
    }
    // 实现接口
    class Template implements iTemplate
    {
        private $vars = array();
        public function setVariable($name, $var)
        {
            $this->vars[$name] = $var;
        }
        public function getHtml($template)
        {
            foreach($this->vars as $name => $value) {
                $template = str_replace('{' . $name . '}', $value, $template);
            }
            return $template;
        }
    }

#### 常量  
   把在类中始终保持不变的值定义为常量。在定义和使用常量的时候不需要使用 $ 符号。  

#### 抽象类  
   任何一个类，如果它里面至少有一个方法是被声明为抽象的，那么这个类就必须被声明为抽象的，定义为抽象的类不能被实例化，被定义为抽象的方法只是声明了其调用方式（参数），不能定义其具体的功能实现，继承一个抽象类的时候，子类必须定义父类中的所有抽象方法。

    <?php
    abstract class AbstractClass
    {
     // 强制要求子类定义这些方法
        abstract protected function getValue();
        abstract protected function prefixValue($prefix);
        // 普通方法（非抽象方法）
        public function printOut() {
            print $this->getValue() . PHP_EOL;
        }
    }
    class ConcreteClass1 extends AbstractClass
    {
        protected function getValue() {
            return "ConcreteClass1";
        }
        public function prefixValue($prefix) {
            return "{$prefix}ConcreteClass1";
        }
    }
    $class1 = new ConcreteClass1;
    $class1->printOut();
    echo $class1->prefixValue('FOO_') . PHP_EOL;
    ?>  
    结果： 
    ConcreteClass1
    FOO_ConcreteClass1

#### static关键字  
   声明类属性或方法为 static(静态)，就可以不实例化类而直接访问。  
   伪变量 $this 在静态方法中不可用，静态属性不可以由对象通过 -> 操作符来访问。

#### Final关键字  
   PHP 5 新增了一个 final 关键字。如果父类中的方法被声明为 final，则子类无法覆盖该方法。如果一个类被声明为 final，则不能被继承。

#### 调用父类构造方法  
   PHP 不会在子类的构造方法中自动的调用父类的构造方法。要执行父类的构造方法，需要在子类的构造方法中调用 parent::__construct() 

    class BaseClass {
    function __construct() {
    print "BaseClass 类中构造方法" . PHP_EOL;
       }
    }
    class SubClass extends BaseClass {
    function __construct() {
        parent::__construct();  // 子类构造方法不能自动调用父类的构造方法
        print "SubClass 类中构造方法" . PHP_EOL;
       }
    }


