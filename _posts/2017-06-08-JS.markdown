---
layout: post
title: "JavaScript一些点"
date: 2017-06-08 15:00:00 +00:00
categories: JavaScript
author: onlyhy
---
### 输出
   没有任何打印或者输出的函数  
### 显示数据  
  1. 使用 window.alert() 弹出警告框。  
  2. 使用 document.write() 方法将内容写到 HTML 文档中。 
如果在文档加载完成后执行document.write，整个HTML页面会被覆盖
  3. 使用 innerHTML 写入到 HTML 元素。  
  4. 使用 console.log() 写入到浏览器的控制台。浏览器F12启用调试模式，在调试窗口点击“Console”菜单  

### 语法  
#### 字面量  
   一般固定值，数字字面量是整数、小数、科学技术（e），字符串字面量可用单引号或双引号，表达式字面量用于计算，数组字面量定义一个数组，对象字面量定义一个对象，函数字面量定义一个函数。  
#### 变量  
   用于存储数据值，使用关键字var来定义变量，使用等号赋值。
   重新声明变量，变量的值不会丢。
   变量声明时如果不用var关键字，就是一个全局变量，即便在函数内定义。
#### 操作符  
   数字与字符串相加，返回字符串！！！
<table>
<tr>
    <td>类型</td>
    <td>实例</td>
</tr>
<tr><td>赋值，算数和位运算符</td>
    <td>= + - * /</td>
</tr>
<tr><td>条件，比较及逻辑运算符</td>
    <td>== != < > === </td>
</tr>
</table>
 === 绝对等于（值和类型均相等）
#### 关键字
   以字母、下划线（_）或美元符（$）开始，后续的字符可以是字母、数字、下划线或美元符  
#### 注释  
   //双斜杠是单行注释  
   /**/是多行注释    
#### 数据类型
   5种数据类型：string,number,boolean,object,function  
   3种对象类型：Object,Date,Array  
   2个不包含任何值的数据类型：null,undefined
   相同变量可做不同类型

    var length = 16;               // Number 通过数字字面量赋值 
    var points = x * 10;           // Number 通过表达式字面量赋值
    var lastName = "Johnson";      // String 通过字符串字面量赋值
    var cars = ["Saab", "Volvo", "BMW"];   
    var cars=new Array("Saab", "Volvo", "BMW");  
    var cars=new Array();
    cars[0]="Saab";
    cars[1]="Volvo";
    cars[2]="BMW";
    // Array通过数组字面量赋值
    var person = {firstName:"John", lastName:"Doe"};  // Object 通过对象字面量赋值  

#### 大小写敏感  
#### 使用Unicode字符集  

### 语句  
   用分号分隔，忽略多余的空格，在文本字符串中使用反斜杠对代码行进行换行  
### 对象  
   是拥有属性和方法的数据，JS中，几乎所有的事物都是对象，对象可以包含多个值，对象是变量的容器，也可以说是键值对的容器，写法为name:value，键值对在JS对象通常称为对象属性。
#### 访问对象
   两种访问方式：person.lastName或者 person["lastName"] 
   对象的方法定义一个函数作为对象的属性存储  
    methodName : function() { code lines }

    objectName.methodName()  
   
#### 创建JS对象
   有两种方法，创建直接的实例，或者使用函数来定义对象然后创建新的实例。  

    person={firstname:"John",lastname:"Doe",age:50,eyecolor:"blue"};  

    function person(firstname,lastname,age,eyecolor)
    {
    this.firstname=firstname;
    this.lastname=lastname;
    this.age=age;
    this.eyecolor=eyecolor;
    }  
    var myFather=new person("John","Doe",50,"blue");  

#### 遍历对象
   for...in循环可遍历对象的属性   
    
    for (variable in object)
    {
        执行的代码……
    }   

#### Number  
   所有数字都是浮点型类型，采用64位浮点格式，前缀位0，解释为八进制，前缀位0x，解释为十六进制,tostring()方法可输出不同进制。  
   Indinity，无穷大，除以0也会产生无限，无穷大是一个数字。  
   NaN，代表非数字值的特殊值，用isNaN()来判断一个值。  
#### String  
   indexOf()定位字符串中某一个指定的字符首次出现的位置，找不到则返回-1，lastIndexOf()在末尾开始查找。  
   match()查找特定的字符，找到则返回这个字符。  
   replace()用某些字符替换另一些字符。  
   split()字符串转为数组。
   转义字符：  
   \'   单引号，\"  双引号，\\  斜杆，\n  换行，\r  回车，\t  tab，\b  空格，\f  换页  

   字符串属性：  
   length,prototype,constructor  

   字符串方法：  
   charAt(),charCodeAt(),concat(),fromCharCode(),indexOf(),lastIndexOf(),match(),replace(),search(),slice(),split(),substr(),substring(),toLowerCase(),toUpperCase(),valueOf()  

### 函数  
   由时间驱动或当它被调用时执行的可重复使用的代码块，函数内部声明的变量(var)是局部变量，函数外声明的是全局变量，局部变量在函数运行以后被删除，全局变量在页面关闭以后被删除，给尚未声明的变量赋值，变量会自动作为全局变量。 

### 循环  
   break用于跳出循环，continue用于跳过循环中的一个迭代  
   continue语句（带或不带标签引用）只能用在循环中，break语句（不带标签引用）只能用在循环或switch中  
### typeof  
   检测变量的数据类型
   NaN返回number,null返回object，undefined返回undefined,null和undefined的值相等，但类型不等。null用于对象，undefined用于变量，属性和方法。
   constructor属性返回所有JS变量的构造函数，可用来查看对象是否为某种类型。

### 正则表达式  
   /正则表达式主体/修饰符（可选）  
   通常用于两个字符串方法：  
   search()方法，用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串，并返回子串的起始位置。  
   replace()方法，用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。
#### RegExp对象  
   预定义了属性和方法的正则表达式对象  
   <a href="http://www.runoob.com/jsref/jsref-obj-regexp.html"></a>
#### 使用test(),exec()  
   test()检测一个字符是否匹配某个模式，是返回true  
   exec()检索字符串中正则表达式的匹配，返回一个数组，存放匹配的结果，没有找到则返回null  

### 严格模式(use strict)  
   不能使用未声明的变量  

### JSON  
   JavaScript Object Notation 是用于存储和传输数据的格式，通常用于服务端向网页传递数据  
   数据为键/值 对，数据由逗号分离，大括号保存对象，方括号保存数组。  
   JSON.parse() 用于将一个JSON字符串转换为JS对象  
   JSON。stringify()用于将JS值转换为JSON字符串  

### javascript:void(0)    
   该操作符指定要计算一个表达式但是不返回值  
   href="#"与href="javascript:void(0)"不同，#包含了一个位置信息，默认的锚是#top也就是网页的上端，而javascript:void(0)仅仅表示一个死链接。  

### 函数  
   函数提升，是JS默认将当前作用域提升到前面去的行为，可以在声明之前调用，使用表达式定义的函数无法提升。  

   函数表达式可以自调用  

    (function () {
    var x = "Hello!!";      // 我将调用自己
    })();  

   函数定义作为对象的属性，称之为对象方法。
   函数如果用于创建新的对象，称之为对象的构造函数。  

#### Arguments对象  
   JS函数有个内置的对象arguments对象，包含了函数调用的参数数组。可以方便的找参数的值。
#### 函数调用  
   4种调用方式，每种方式的不同在于this的初始化，总的原则，this指的是，调用函数的那个对象。  
#### 闭包  
   可访问上一层函数作用域里变量的函数，即使上一层函数已经关闭。  
### EventListener  
   addEventListener()方法用于向指定元素或对象添加事件句柄，可向一个元素添加多个事件句柄，不会覆盖已存在的事件，同个元素可添加多个同类型的事件句柄，removeEventListener() 方法移除由 addEventListener() 方法添加的事件句柄 

    element.addEventListener(event, function, useCapture);  

   第一个参数是事件的类型 (如 "click" 或 "mousedown")，不要使用on前缀
   第二个参数是事件触发后调用的函数。
   第三个参数是个布尔值用于描述事件是冒泡还是捕获。该参数是可选的，默认为false，即冒泡。冒泡中，内部事件会先被触发，再触发外部，捕获反之。