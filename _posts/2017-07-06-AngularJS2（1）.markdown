---
layout: post
title: "菜鸟教程AngularJS2教程笔记（一）"
date: 2017-07-06 08:00:00 +00:00
categories: AngularJS
author: onlyhy
---

### 前言  
   AngularJS2基于ES6开发，需要具备基础知识：HTML、CSS、JS、NPM、TypeScript  

### God!!  
   AngularJS2.x和AngularJS1.x的区别类似Java和JavaScript的区别，惊不惊喜？意不意外？  

### 运行条件  
   ES5浏览器需要以下模块加载器：  
   systemjs-通用模块加载器，es6-module-loader-ES6模块加载器，traceur-ES6转码器  
### JS环境配置  

### 创建配置文件  
#### 创建目录  

    $ mkdir angular-quickstart
    $ cd angular-quickstart  

#### 载入需要的库  
   推荐使用npm作为包管理工具，创建package.json,使用淘宝的npm镜像

    $ npm install -g cnpm --registry=https://registry.npm.taobao.org  

    $ cnpm install

   angular-quickstart目录下会生成一个node_modules目录，包含了需要的模块

### 创建Angular组件
   组件Component是应用的基础和核心，一个组件包装了一个特定的功能，组件之间协同工作以组装成一个完整的应用程序。  
   一般，一个组件就是一个用于控制视图模板的JS类。
   在angular-quickstart创建一个app的目录：  

    $ mkdir app
    $ cd app  

   添加组件文件app.component.js 

    (function(app) {
    app.AppComponent =
    ng.core.Component({
      selector: 'my-app',
      template: '<h1>我的第一个 Angular 应用</h1>'
    })
    .Class({
      constructor: function() {}
    });
    })(window.app || (window.app = {}));

   ng.core中的Conponent和Class方法创建了一个名为AppComponent的可视化组件。  
   Component方法接受一个包含两个属性的配置对象，Class方法是实现组件本身的地方，在Class中给组件添加属性和方法，会绑定到相应的视图和行为。  

#### 模块  
   AngularJS是模块化的，ES5没有内置的模块化系统，使用第三方模块系统，为应用创建独立的命名空间app，代码包裹在 IIFE（立即执行函数表达式）中。

    (function(app) {
    })(window.app || (window.app = {}));  

#### Class定义对象  
   当我们要创建一个有实际意义的应用时，使用属性和应用逻辑来扩展这个对象  

#### Component定义对象  
   ng.core.Component()告诉Angular这个类定义对象是一个Angular组件。上例中selector 为一个宿主HTML元素定义了一个简单的CSS选择器my-app。当Angular在宿主HTML中遇到一个my-app元素时它创建并显示一个AppComponent实例。
   template 属性容纳着组件的模板。

### 添加NgModule  
   应用由模块组成，该模块包含了Angular 应用所需要的组件及其他任何东西。  
   创建app/app.module.js文件

    (function(app) {
    app.AppModule =
    ng.core.NgModule({
      imports: [ ng.platformBrowser.BrowserModule ],
      declarations: [ app.AppComponent ],
      bootstrap: [ app.AppComponent ]
    })
    .Class({
      constructor: function() {}
    });
    })(window.app || (window.app = {}));  

### 启动应用  
   添加app/main.js文件  

    (function(app) {
    .addEventListener('DOMContentLoaded', function() {
    ng.platformBrowserDynamic
      .platformBrowserDynamic()
      .bootstrapModule(app.AppModule);
     });
    })(window.app || (window.app = {}));

   启动应用需要两样东西
   1. Angular 的 platformBrowserDynamic().bootstrapModule 函数
   2. 应用根模块AppModule  

#### 创建index.html文件  
   1. 载入需要的JS库
   2. 载入自己的JS文件，注意顺序
   3. 在body标签中添加my-app标签 
   在main.js中调用bootstrapModule 函数，读取Appmodule的元数据，在启动组件中找到AppComponent并找到my-app选择器，定位到元素，在标签之间载入内容。  
   可添加一些样式  

    $ npm start  

访问http://localhost:3000/  





### TypeScript(TS)环境配置  
   
### 一、创建与配置项目  
#### 创建目录  
 
    $ mkdir angular-quickstart
    $ cd angular-quickstart   

#### 创建配置文件  
   package.json 标记本项目所需要的npm依赖包
   tsconfig.json定义了TS编译器如何从项目源文件生成JS代码
   typings.json为TS编译器无法识别的库提供额外的定义文件
   systemjs.config.js为模块加载器提供了该到哪里查找应用模块的消息，注册所有必备的依赖包，还包括文档中后面的例子需要用到的包 
   安装依赖包：

    $ cnpm install   

   angular-quickstart目录下会生成一个node_modules目录，项目的目录结构如下：
<img src="C:\Users\YellowHappy\onlyhy.github.io\assets\实例目录.jpg" alt="总结构"> 

###二、创建应用  
   每个应用至少需要一个根模块，这里实例中为AppModule  
   接下来我们在 angular-quickstart 目录下创建 app 目录：  
   
    $ mkdir app
    $ cd app  

   在 app 目录下创建 app.module.ts 文件  
   
    import { NgModule }      from '@angular/core';
    import { BrowserModule } from '@angular/platform-browser';  //创建web应用需要导入
    @NgModule({
      imports:      [ BrowserModule ]
    })
    export class AppModule { }  

#### 三、创建组件并添加到应用中  
   在 app 目录下创建app.component.ts文件，这里创建一个根组件AppComponent

    import { Component } from '@angular/core';
    @Component({
      selector: 'my-app',
      template: '<h1>我的第一个 Angular 应用</h1>'
    })
    export class AppComponent { }  

   以上代码从 angular2/core 引入了 Component 包。  
   @Component 是 Angular 2 的装饰器 ，它会把一份元数据关联到 AppComponent 组件类上。  
   my-app 是一个 CSS 选择器，可用在 HTML 标签中，作为一个组件使用。  
   @view 包含了一个 template ，告诉 Angular 如何渲染该组件的视图。  
   export 指定了组件可以再文件外使用。  

   打开app.module.ts文件，导入新的AppComponent并且添加到NgModule装饰器中  

    import { NgModule }      from '@angular/core';
    import { BrowserModule } from '@angular/platform-browser';
    import { AppComponent }   from './app.component';
    @NgModule({
      imports:      [ BrowserModule ],
      declarations: [ AppComponent ],
      bootstrap:    [ AppComponent ]
    })
    export class AppModule { }  

### 四、启动应用  
   在app目录下创建main.ts文件  

    import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
    import { AppModule } from './app.module'; 
    const platform = platformBrowserDynamic();
    platform.bootstrapModule(AppModule);  //初始化平台，启动你的AppModule  

### 五、定义该应用的宿主页面  
   在angular-quickstart目录下创建index.html文件  

    <html>
    <head>
    <title>Angular 2 实例 - 菜鸟教程(runoob.com)</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="styles.css">
    <!-- 1. 载入库 -->
    <!-- IE 需要 polyfill -->
    <script src="node_modules/core-js/client/shim.min.js"></script>
    <script src="node_modules/zone.js/dist/zone.js"></script>
    <script src="node_modules/reflect-metadata/Reflect.js"></script>
    <script src="node_modules/systemjs/dist/system.src.js"></script>
    <!-- 2. 配置 SystemJS -->
    <script src="systemjs.config.js"></script>
    <script>
      System.import('app').catch(function(err){ console.error(err); });
    </script>
    </head>
    <!-- 3. 显示应用 -->
    <body>
    <my-app>Loading...</my-app>
    </body>
    </html>  

   JavaScript 库： core-js 是为老式浏览器提供的填充库， zone.js 和 reflect-metadata 库是 Angular 需要的，而 SystemJS 库是用来做模块加载的。  
   
   SystemJS 的配置文件和脚本，可以导入并运行了我们刚刚在 main 文件中写的 app 模块。
   
   my-app 标签是应用载入的地方

   可在目录下的styles.css中设置样式  

### 六、编译并运行应用程序  

    npm start  

   访问http://localhost:3000/

 <img src="C:\Users\YellowHappy\onlyhy.github.io\assets\目录2.jpg" alt="总结构">


   



