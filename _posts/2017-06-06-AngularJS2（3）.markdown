---
layout: post
title: "菜鸟教程AngularJS2教程笔记（三）"
date: 2017-06-06 1三:00:00 +00:00
categories: AngularJS
author: onlyhy
---

### 数据显示  
将数据显示到用户界面，有三种方式：  
1. 通过插值表达式显示组件的属性
2. 通过 NgFor 显示数组型属性
3. 通过 NgIf 实现按条件显示  

### 一、通过插值表达式显示组件的属性  
{{属性名}}  

    import { Component } from '@angular/core';
    @Component({
      selector: 'my-app',
      template: `
        <h1>{{title}}</h1>
        <h2>我喜欢的网站: {{mySite}}</h2>
        `
    })
    export class AppComponent {
      title = '站点列表';
      mySite = '菜鸟教程';
    }

模板是包在反引号（`）中的多行字符串，不是单引号！！！！！！   

### 二、通过 NgFor 显示数组型属性

    @Component({
      selector: 'my-app',
      template: `
    <h1>{{title}}</h1>
    <h2>我喜欢的网站: {{mySite}}</h2>
    <p>网站列表:</p>
    <ul>
      <li *ngFor="let site of sites">// ngFor 指令来显示 sites 列表中的每一个条目,不要忘记加*号！！
        {{ site }}
      </li>
    </ul>
    `
    })
    export class AppComponent {
      title = '站点列表';
      sites = ['菜鸟教程', 'Google', 'Taobao', 'Facebook'];
      mySite = this.sites[0];
    }  

ngFor 循环了一个数组， 事实上 ngFor 可以迭代任何可迭代的对象。  

### 三、通过 NgIf 实现按条件显示   

    template: `
    <h1>{{title}}</h1>
    <h2>我喜欢的网站: {{mySite.name}}</h2>
    <p>网站列表:</p>
    <ul>
      <li *ngFor="let site of sites">
       {{ site.name }}
      </li>
    </ul>
    <p *ngIf="sites.length > 3">你有很多个喜欢的网站!</p>
    `  



### 用户输入  
使用 Angular 事件绑定语法来绑定用户的交互行为触发的DOM事件。  

#### 绑定到用户输入事件  

      template: `
    <button (click)="onClickMe()">点我!</button>
    {{clickMessage}}`   
     ...
    export class ClickMeComponent {
      clickMessage = '';
      onClickMe() {
    this.clickMessage = '菜鸟教程!';
      }
    }

等号左边的 (click) 表示把该按钮的点击事件作为绑定目标 。 等号右边，引号中的文本是一个模板语句。  

#### 通过 $event 对象取得用户输入  
绑定到一个输入框的 keyup 事件，并且把用户输入的东西回显到屏幕上

    template: `
    <input (keyup)="onKey($event)">
    <p>{{values}}</p>
    `
    ...
    export class KeyUpComponent_v1 {
    values = '';
    // 强类型
    onKey(event: KeyboardEvent) {
    this.values += (<HTMLInputElement>event.target).value + ' | ';
    }  

#### 从一个模板引用变量中获得用户输入
模板引用变量通过在标识符前加上井号 (#) 来实现  

    @Component({
      selector: 'key-up2',
      template: `
    <input #box (keyup)="onKey(box.value)">
      <p>{{values}}</p>
      `
    })
    export class KeyUpComponent_v2 {
      values = '';
      onKey(value: string) {
        this.values += value + ' | ';
      }
    }  

#### 按钮事件过滤（通过key.enter）    
比如在用户按下回车 (enter) 键的时候才获取输入框的值

    @Component({
    selector: 'key-up3',
    template: `
    <input #box (keyup.enter)="values=box.value">
    <p>{{values}}</p>
    `
    })
    export class KeyUpComponent_v3 {
    values = '';
    }


#### blur( 失去焦点 )事件  
在元素失去焦点后更新 values 属性  
同时监听输入回车键与输入框失去焦点的事件：  

    @Component({
    selector: 'key-up4',
    template: `
    <input #box
      (keyup.enter)="values=box.value"
      (blur)="values=box.value">
    <p>{{values}}</p>
     `
    })
    export class KeyUpComponent_v4 {
     values = '';
    }  

### 表单  
用组件和模板构建一个 Angular 表单

<a href="http://www.runoob.com/angularjs2/angularjs2-forms.html">表单案例</a>  
1. 创一个模型类site.ts
2. 创一个表单组件site-form.component.ts   
3. 定义根模块，指定了引用到的外部及声明属于本模块中的组件。  
 比如 SiteFormComponent，因为模板驱动的表单有它们自己的模块，得把 FormsModule 添加到本应用的 imports 数组中，才能使用表单。
4. 创建根组件，模板中定义SiteFormComponent将被放的地方（选择器）
5. 创建一个初始HTML表单模板site-form.component.html  
6. 在目录下执行cnpm install bootstrap --save   将bootstrap样式链入初始模板中
7. npm start 后 访问端口
 
#### ngModel双向绑定  
使用 ngModel 进行双向数据绑定，通过监听 DOM 事件，来实现更新组件的属性  
修改 site-form.component.html ,使用 ngModel 把我们的表单绑定到模型  
如：

    <div class="form-group">
        <label for="name">网站名</label>
       <input type="text" class="form-control" id="name"
         required
         [(ngModel)]="model.name" name="name">
      </div>  

还可以通过 ngModel 跟踪修改状态与有效性验证，它使用了三个 CSS 类来更新控件，以便反映当前状态，可以添加自定义 CSS 来反应表单的状态。  

     <div class="form-group">
        <label for="name">网站名</label>
          <input type="text" class="form-control" id="name"
               required
               [(ngModel)]="model.name" name="name"
               #name="ngModel" >
        <div [hidden]="name.valid || name.pristine" 
             class="alert alert-danger">
          网站名是必需的
        </div>
      </div>  

把 div 元素的 hidden 属性绑定到 name 控件的属性，我们就可以控制"name"字段错误信息的可见性