---
layout: post
title: "PHP与MySQL"
date: 2017-07-14 08:00:00 +00:00
categories: PHP
author: onlyhy
---  
### 连接MySQL  
* MySQLi extension  只针对MySQL数据库
* PDO(PHP Data Objects)  能应用在12种不同数据库中

访问数据库前，先连接到数据库服务器  
如：（MySQLi-面向对象）

    <?php
    $servername = "localhost";
    $username = "username";
    $password = "password";
    // 创建连接
    $conn = new mysqli($servername, $username, $password);   
    // 检测连接
    if ($conn->connect_error) {
        die("连接失败: " . $conn->connect_error);
    } 
    echo "连接成功";
    ?>  

### 创建数据库  
必须为 mysqli 对象指定三个参数 (servername, username 和 password)  

    // 创建数据库
    $sql = "CREATE DATABASE myDB";
    if ($conn->query($sql) === TRUE) {
        echo "数据库创建成功";
    } else {
        echo "Error creating database: " . $conn->error;
    }
    $conn->close();  



### 创建表  
创表之前，用use先选择数据库，或者在连接时，指定了数据库名

    // 使用 sql 创建数据表
    $sql = "CREATE TABLE MyGuests (
    id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, 
    firstname VARCHAR(30) NOT NULL,
    lastname VARCHAR(30) NOT NULL,
    email VARCHAR(50),
    reg_date TIMESTAMP
    )";
    if ($conn->query($sql) === TRUE) {
        echo "Table MyGuests created successfully";
    } else {
        echo "创建数据表错误: " . $conn->error;
    }  

### 插入数据  
* PHP中，SQL查询语句必须使用引号
* SQL 查询语句中的字符串值必须加引号
* 数值和NULL的值不需要引号  

mysqli_multi_query() （面向过程）；multi_query()（面向对象）可用来执行多条SQL语句。  

### 预处理语句  
对于防止 MySQL 注入是非常有用的，虽然语句多次执行但只做了一次查询。

    // 预处理及绑定
    $stmt = $conn->prepare("INSERT INTO MyGuests (firstname, lastname, email) VALUES (?, ?, ?)");
    $stmt->bind_param("sss", $firstname, $lastname, $email);
    // 设置参数并执行
    $firstname = "John";
    $lastname = "Doe";
    $email = "john@example.com";
    $stmt->execute();
 
工作原理：
1. 预处理：创建 SQL 语句模板并发送到数据库。预留的值使用参数 "?" 标记

    INSERT INTO MyGuests (firstname, lastname, email) VALUES(?, ?, ?)

2. 数据库解析，编译，对SQL语句模板执行查询优化，并存储结果不输出
3. 执行：最后，将应用绑定的值传递给参数（"?" 标记），数据库执行语句。应用可以多次执行语句，如果参数的值不一样


模块化处理问题，第二个参数sss指定了每个参数的类型，保证数据安全性：  
i - 整数；d - 双精度浮点数；s - 字符串；b - 布尔值  

### 读取数据  
SELECT 语句用于从数据表中读取数据

    $sql = "SELECT id, firstname, lastname FROM MyGuests";
    $result = $conn->query($sql);
    if ($result->num_rows > 0) {
        // 输出数据
        while($row = $result->fetch_assoc()) {//fetch_assoc()将集合集放入到关联数组并循环输出
        echo "id: " . $row["id"]. " - Name: " . $row["firstname"]. " " . $row["lastname"]. "<br>";
    }
    } else {
        echo "0 结果";
    }

### Where子句 
mysqli_query() 函数，用于向 MySQL 连接发送查询或命令。  

### ORDER BY 关键词  
默认升序排序，想要降序用DESC
* 可以根据多个列进行排序，只有当第一列的值相同时才使用第二列  

### Update
更新数据库表中已存在的记录  

    mysqli_query($con,"UPDATE Persons SET Age=36
    WHERE FirstName='Peter' AND LastName='Griffin'");  

### Delete  
DELETE FROM 语句用于从数据库表中删除记录  

    mysqli_query($con,"DELETE FROM Persons WHERE LastName='Griffin'");  

### 数据库ODBC
ODBC 是一种应用程序编程接口（Application Programming Interface，API），使我们有能力连接到某个数据源，通过一个 ODBC 连接，可以连接到网络中的任何计算机上的任何数据库，只要 ODBC 连接是可用的。  

#### 创建ODBC连接  
以到达 MS Access 数据库为例  
1. 在控制面板中打开管理工具图标。
2. 双击其中的数据源(ODBC)图标。
3. 选择系统 DSN 选项卡。
4. 点击系统 DSN 选项卡中的添加。
5. 选择Microsoft Access Driver。点击完成。
6. 在下一个界面，点击选择来定位数据库。
7. 为数据库起一个数据源名(DSN)。
8. 点击确定  

####连接到ODBC  
odbc_connect() 函数用于连接到 ODBC 数据源。该函数有四个参数：数据源名、用户名、密码以及可选的指针类型。
odbc_exec() 函数用于执行 SQL 语句  

    $conn=odbc_connect('northwind','','');
    $sql="SELECT * FROM customers";
    rs=odbc_exec($conn,$sql);

#### 取回记录  
odbc_fetch_row() 函数用于从结果集中返回记录。如果能够返回行，则函数返回 true，否则返回 false。
函数有两个参数：ODBC 结果标识符和可选的行号  

    odbc_fetch_row($rs)  

#### 从记录中取回字段  
odbc_result() 函数用于从记录中读取字段。该函数有两个参数：ODBC 结果标识符和字段编号或名称  

    $compname=odbc_result($rs,1);   //返回第一个字段的值
    $compname=odbc_result($rs,"CompanyName");  //返回名为 "CompanyName" 的字段的值

#### 关闭ODBC连接  

    odbc_close($conn);



