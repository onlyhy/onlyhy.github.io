---
layout: post
title:  "Git学习笔记"
date:   2017-06-29 22:05:00 +00:00
categories: Git
---


#### 创建版本库
创建一个空目录

	$ mkdir learngit
	$ cd learngit
	$ pwd
	/Users/onlyhy/learngit

`pwd`用于显示当前目录

通过 `git init` 初始化

添加文件到Git仓库

1. `git add <file>` 可添加多个
2. `git commit` 完成

#### 时光机穿梭

##### 版本回退
提交修改命令与提交新文件一样是两个步骤

`git status`随时掌握工作区的状态

`git diff`可查看文件修改的内容

`HEAD`指向当前版本，`HEAD^`上一个版本，以此类推，简单化如`HEAD~100`

使用命令`git reset --hard commit_id`在版本之中穿梭

`git log` 查看提交历史，显示从最近到最远的提交日志，以确定要退回到哪个版本，加上`--pretty=oneline`参数后输出简洁点

`git reflog` 查看命令历史，确定要回到未来的哪个版本

##### 工作区和暂存区
`git add` 把要提交的所有修改放到暂存区（Stage）,`git commit` 一次性把暂存区的所有修改提交到分支。

##### 管理修改
每次修改，如果不`add`到暂存区，那就不会加入到`commit`中

##### 撤销修改
`git checkout --file`丢弃工作区中的修改
若不但改乱了文件还添加到了暂存区，想丢弃修改两个步骤

1. `git reset HEAD file`
2. `git checkout --file`

已经提交了不合适的修改到版本库想要撤销提交，参考**版本回退**一节

##### 删除文件

`git rm`用于删除一个文件，并`git commit` 文件从版本库中删除了
若不小心删错了，版本库中还有，则`git checkout --file`恢复

#### 远程仓库

##### 添加远程库

在本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，让两个仓库远程同步。
在GitHub创建一个新的仓库，仓库名与本地已有仓库名一直，其他默认，创建。
可以从这个仓库克隆出新的仓库或者将一个已有的本地仓库与之关联，然后把本地的内容推送到GitHub仓库。
在本地learngit仓库下执行

	$ git remote add origin git@github.com:onlyhy/learngit.git

远程库的名字默认为origin，接下来可把本地库的所有内容推送到远程库上。

	$ git push -u origin master

由于远程库是空的，第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。推送成功后，远程库内容与本地一模一样。
只要本地作了提交，就`$git push origin master`将本地master分支的最新修改推送至GitHub

##### 从远程库克隆
GitHub创建新的仓库如gitskills后，`$ git clone git@github.com:onlyhy/gitskills.git`克隆到本地，GitHub的地址不止一个，有*https://*或者*git://*,*ssh*支持的原生*git*协议速度最快。

#### 分支管理

##### 创建与分支合并
Git里*master*分支是主分支，*HEAD*指向当前分支，*master*指向最新的提交，再用*HEAD*指向*master*，就能确定当前分支，以及当前分支的提交点。每次提交，*master*分支都会向前移动一步.
当创建新的分支，如*dev*，Git新建了一个指针*dev*，指向*master*相同的提交，再把*HEAD*指向*dev*，就表示当前分支在*dev*上,之后对工作区的修改和提交就是针对*dev*分支了。
当*dev*上的工作完成后可将它合并到*master*上，最简单就是把*master*指向*dev*的当前提交，完成合并。合并后可以删除*dev*分支，即将*dev*指针删掉。

查看分支：`git branch`

创建分支：`git branch <name>`

切换分支：`git checkout <name>`

创建+切换分支：`git checkout -b <name>`

合并某分支到当前分支：`git merge <name>`

删除分支：`git branch -d <name>`

实战：

	$ git checkout -b dev 
	Switched to a new branch 'dev'
	$ git branch
	* dev  
  	  master
  	Creating a new branch is quick.
  	$ git add readme.txt 
	$ git commit -m "branch test"
	[dev fec145a] branch test
	1 file changed, 1 insertion(+)
	$ git checkout master
	Switched to branch 'master'
	$ git merge dev
	Updating d17efd8..fec145a
	Fast-forward
	readme.txt |    1 +
 	1 file changed, 1 insertion(+)
 	$ git branch -d dev
	Deleted branch dev (was fec145a).
	$ git branch
	* master
	

##### 解决冲突
Git无法自动合并分支时，首先解决冲突，`git status`也会告诉我们冲突的文件，再提交，合并。
`git log --graph`可看到分支合并图

##### 分支管理策略
通常合并分支Git用的是*Fast forward*模式，但删除分支后，会丢掉分支信息。
`git merge --no-ff`该参数表示禁用`Fast forward`,则本次合并创建一个新的commit。合并后的历史有分支能看出来曾经做过合并。

##### Bug分支
通过一个新的临时分支来修复，修复后合并分支并删除临时分支。
`git stash`将现场工作储藏起来，等一会恢复现场再继续工作。
首先确定在哪个分支上修复bug,从它上面创建临时分支，修复完成后，切换回分支完成合并，删除临时分支。
`git stash list`查看工作现场

	$ git stash list
	stash@{0}: WIP on dev: 6224937 add merge

恢复现场有两个办法

1. `git stash apply`，恢复后，stash内容并不删除，需要用`git stash drop`删除
2. `git stash pop`，恢复的同时把stash内容也删除了

可多次`stash`,恢复的时候，先`git stash list`查看，再恢复指定的`stash`，如`git stash apply stash@{0}`

##### Feature分支
每添加一个新功能，新建一个feature分支，在上面开发，完成后合并，再删除该feature分支。
要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除

##### 多人协作
1. 首先，可以试图用git push origin branch-name推送自己的修改；

2. 如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

3. 如果合并有冲突，则解决冲突，并在本地提交；

4. 没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！

如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。

`git remote -v`查看远程库信息

本地新建的分支如果不推送到远程，对其他人就是不可见的；

`git push origin branch-name`从本地推送分支，如果推送失败，先用`git pull`抓取远程的新提交；

`git checkout -b branch-name origin/branch-name`在本地创建和远程分支对应的分支，本地和远程分支的名称最好一致；

`git branch --set-upstream branch-name origin/branch-name`建立本地分支和远程分支的关联

`git pull`从远程抓取分支，如果有冲突，要先处理冲突。

#### 标签管理
*tag*是一个容易记住的有意义的名字，跟某个commit绑在一起
切换到需要打标签的分支上，`git tag <name>`打一个新标签
`git tag`可查看所有标签,标签按照字母排序的不是时间顺序，`git show <tagname>`查看标签信息
可针对*commit id*打标签，如`git tag v0.9 6224937`
创建带有说明的标签，`-a`指定标签名，`-m`指定说明文字，`-s`用私钥签名一个标签，签名采用PGP签名，要安装gpg（GnuPG）
标签只存储在本地，不会自动推送到远程，因此打错的标签可在本地安全的删除。
`git push origin <tagname>`可以推送一个本地标签；

`git push origin --tags`可以推送全部未推送过的本地标签；

`git tag -d <tagname>`可以删除一个本地标签；

`git push origin :refs/tags/<tagname>`可以删除一个远程标签,先从本地删除然后再从远程删除。

#### 自定义Git

##### 忽略特殊文件
在Git工作区的根目录下创建一个特殊的*.gitignore*文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件
不需要从头写.gitignore文件，GitHub已经为我们准备了各种配置文件，只需要组合一下就可以使用了。所有配置文件可以直接在线浏览（https://github.com/github/gitignore）
忽略文件的原则是：

1. 忽略操作系统自动生成的文件，比如缩略图等；
2. 忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件；
3. 忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。

若文件被忽略了可用`-f`强制添加到Git,`git check-ignore`可找出来哪个规则写了

	$ git check-ignore -v App.class
	.gitignore:3:*.class    App.class

*.gitignore*的第3行规则忽略了该文件

##### 配置别名
`git config --global alias.st status`用st表示status
`git config --global alias.unstage 'reset HEAD'`用unstage表示reset HEAD

##### 配置文件
每个仓库的Git配置文件都放在*.git/config*文件中，别名就在*[alias]*后面，要删除别名，直接把对应的行删掉即可。当前用户的Git配置文件放在用户主目录下的一个隐藏文件*.gitconfig*中

#### 搭建Git服务器
准备一台运行Linux的机器

1. 安装git：
	
	$ sudo apt-get install git

2. 创建一个git用户，用来运行git服务：
	
	$ sudo adduser git

3. 创建证书登录：
收集所有需要登录的用户的公钥，就是他们自己的*id_rsa.pub*文件，把所有公钥导入到*/home/git/.ssh/authorized_keys*文件里，一行一个。

4. 初始化Git仓库：
先选定一个目录作为Git仓库，假定是*/srv/sample.git*，在/srv目录下输入命令：

	$ sudo git init --bare sample.git

Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。然后，把owner改为git：

	$ sudo chown -R git:git sample.git

5. 禁用shell登录：
出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行：

	git:x:1001:1001:,,,:/home/git:/bin/bash
	改为：
	git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell

这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。

6. 克隆远程仓库：
现在，可以通过git clone命令克隆远程仓库了，在各自的电脑上运行：

	$ git clone git@server:/srv/sample.git
	Cloning into 'sample'...
	warning: You appear to have cloned an empty repository.

剩下的推送就简单了。

 