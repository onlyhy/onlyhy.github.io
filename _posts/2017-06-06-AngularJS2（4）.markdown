---
layout: post
title: "菜鸟教程AngularJS2教程笔记（四）"
date: 2017-06-06 16:00:00 +00:00
categories: AngularJS
author: onlyhy
---
### 模板语法  
模板简单讲就是用户能看到的东西。

#### HTML  
模板的语言，除了 script 元素是被禁用的外 ，其他 HTML 元素都是支持的。  

#### 插值表达式  
{{ ... }}，可以把计算的字符串插入HTML中，也可以作为属性值来使用。  

#### 模板表达式  
{{ ... }} 里头其实就是一个模板表达式，Angular 会对其进行求值并转化为字符串输出，可以使用getval()来获取这个表达式的值。  
模板表达式类似 JavaScript 的语言，但有些是禁止的  
* 赋值表达式（=，+=，-=...）
* new操作符
* 带有;或者'的连接表达式
* 自增和自减操作（++和--）
* 不支持位运算符（|和&）
* 模板表达式的操作符，如|和?.等，被赋予了新的含义  

#### 属性绑定  
`<img [src]="imageUrl">`

`<button [disabled]="isUnchanged">按钮是禁用的</button>`    

`<div [ngClass]="classes">[ngClass]绑定到classes 属性</div> ` 

`user-detail [user]="currentUser"></user-detail>`<//自定义组件的属性（这是父子组件间通讯的重要途径）

#### 属性(Attribute)绑定
当元素没有属性可绑的时候，使用HTML标签属性(Attribute)绑定  
HTML标签特性绑定在语法上类似于属性绑定，但中括号中的部分不是一个元素的属性名，而是由一个attr.的前缀和HTML标签属性的名称组成.

      <tr><td [attr.colspan]="1 + 1">One-Two</td></tr>  

#### css类绑定  
方括号中的部分不是一个元素的属性名，而是包括一个 class 前缀，紧跟着一个点 (.) ，再跟着 CSS 类的名字组成。 其中后两部分是可选的。例如： [class.class-name]   

    <!-- 标准HTML样式类设置 -->
    <div class="bad curly special">Bad curly special</div>
    <!-- 通过绑定重设或覆盖样式类  -->
    <div class="bad curly special" [class]="badCurly">Bad curly</div>
    <!-- 通过一个属性值来添加或移除special样式类 -->
    <div [class.special]="isSpecial">这个样式比较特殊</div>  

#### style样式绑定  
样式绑定包括一个style.，紧跟着css样式的属性名  

    <button [style.color] = "isSpecial ? 'red': 'green'">红色</button>
    <button [style.background-color]="canSave ? 'cyan': 'grey'" >保存</button>
    <!-- 带有单位的样式绑定 -->
    <button [style.font-size.em]="isSpecial ? 3 : 1" >大</button>
    <button [style.font-size.%]="!isSpecial ? 150 : 50" >小</button>  

#### 事件绑定  
等号左侧小括号内的 目标事件 和右侧引号中的 模板声明 组成  

    <button (click)="onSave()">保存</button>  

#### NgModel双向数据绑定  

    <input [(ngModel)]="currentUser.firstName">
    <input bindon-ngModel="currentUser.firstName">  

#### 内置指令  
NgClass、NgStyle、NgIf、NgFor、NgSwitch等。  

#### NgClass  
通过绑定到 NgClass 动态添加或删除 CSS 类  

    <div [style.font-size]="isSpecial ? 'x-large' : 'smaller'" >
    这个div是大号的。
    </div>

#### NgStyle  
NgStyle 通过把它绑定到一个key:value控制对象的形式，可以让我们同时设置很多内联样式  

    setStyles() {
    let styles = {
    // CSS属性名
    'font-style':  this.canSave      ? 'italic' : 'normal',  // italic
    'font-weight': !this.isUnchanged ? 'bold'   : 'normal',  // normal
    'font-size':   this.isSpecial    ? '24px'   : '8px',     // 24px
      };
      return styles;
    }  
    <div [ngStyle]="setStyles()">
    这个div的样式是italic, normal weight, 和extra large (24px)。
    </div>  

#### NgIf  
通过把NgIf指令绑定到一个真值表达式，可以把一个元素及其子元素添加到DOM树上,绑定到一个假值表达式将从DOM树中移除该元素及其子元素  

    <div *ngIf="currentUser">Hello,{{currentUser.firstName}}</div>  

#### NgSwitch  
从一组可能的元素树中根据条件显示其中一个时，就需要NgSwitch  

    <span [ngSwitch]="userName">
      <span *ngSwitchCase="'张三'">张三</span>
      <span *ngSwitchCase="'李四'">李四</span>
      <span *ngSwitchCase="'王五'">王五</span>
      <span *ngSwitchCase="'赵六'">赵六</span>
      <span *ngSwitchDefault>龙大</span>
    </span>  


#### NgFor  
展示一个由多个条目组成的列表时就需要这个指令  

    <div *ngFor="let user of users">{{user.fullName}}</div>

#### NgForTrackBy  
追踪函数不会排除所有DOM更改。如果用来判断是否为同一个联系人的属性变化了，就会更新DOM元素，反之就会留下这个DOM元素。列表界面就会变得比较更加平滑，具有更好的响应效果  

    trackByUsers(index: number, user: User){return user.id}  
    <div *ngFor="let user of users; trackBy:trackByUsers">({{user.id}}) {{user.fullName}}</div>  


#### 模板引用变量  
模板中对 DOM 元素或指令的引用，它可以和任何自定义 Web 组件协同工作

    <!-- phone 引用了 input 元素，并将 `value` 传递给事件句柄 -->
    <input #phone placeholder="phone number">
    <button (click)="callPhone(phone.value)">Call</button>
     
    <!-- fax 引用了 input 元素，并将  `value` 传递给事件句柄  -->
    <input ref-fax placeholder="fax number">
    <button (click)="callFax(fax.value)">Fax</button>

