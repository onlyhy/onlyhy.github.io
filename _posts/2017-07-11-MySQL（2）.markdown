---
layout: post
title: "关于MySQL（2）"
date: 2017-07-11 010:00:00 +00:00
categories: MySQL
author: onlyhy
--- 
<ul>
    <li><a href="#sw">事务</a></li>
    <li><a href="#alter">ALTER命令</a></li>
    <li><a href="#sy">索引</a></li>
    <li><a href="#ls">临时表</a></li>
    <li><a href="#fz">复制表<</a></li>
    <li><a href="#ysj">元数据</a></li>
    <li><a href="#xl">序列使用</a></li>
    <li><a href="#cfsj">处理重复数据</a></li>
    <li><a href="#zr">SQL注入</a></li>
    <li><a href="#dcdr">导出导入数据</a></li>
</ul>

### <span id="sw">事务</span>  
 用于处理操作量大，复杂度高的数据,只有使用了 Innodb 数据库引擎的数据库或表才支持事务,保证成批的 SQL 语句要么全部执行，要么全部不执行。
四个特性： 
 1.  Atomicity（原子性）：一组事务，要么成功；要么撤回
 2.  Consistency（稳定性）：有非法数据（外键约束之类），事务撤回
 3.  Isolation（隔离性）：事务独立运行。一个事务处理后的结果，影响了其他事务，那么其他事务会撤回。事务的100%隔离，需要牺牲速度
 4.  Durability（可靠性）：软、硬件崩溃后，InnoDB数据表驱动会利用日志文件重构修改。可靠性和高速度不可兼得， innodb_flush_log_at_trx_commit 选项 决定什么时候把事务保存到日志里  

#### 事务控制语句  
1. BEGIN或START TRANSACTION：显示地开启一个事务
2. COMMIT：也可以使用COMMIT WORK，二者等价，提交事务，并使已对数据库进行的所有修改称为永久性的  
3. ROLLBACK：有可以使用ROLLBACK WORK，二者等价，回滚会结束用户的事务，并撤销正在进行的所有未提交的修改
4. SAVEPOINT identifier：SAVEPOINT允许在事务中创建一个保存点，一个事务中可以有多个SAVEPOINT
5. RELEASE SAVEPOINT identifier：删除一个事务的保存点，当没有指定的保存点时，执行该语句会抛出一个异常
6. ROLLBACK TO identifier；把事务回滚到标记点
7. SET TRANSACTION：用来设置事务的隔离级别。InnoDB存储引擎提供事务的隔离级别有READ UNCOMMITTED、READ COMMITTED、REPEATABLE READ和SERIALIZABLE  

#### 事务处理  
 法一：用 BEGIN, ROLLBACK, COMMIT来实现
 法二：直接用 SET 来改变 MySQL 的自动提交模式:SET AUTOCOMMIT=0 禁止自动提交，SET AUTOCOMMIT=1 开启自动提交。

    mysqli_query($conn, "SET AUTOCOMMIT=0"); // 设置为不自动提交，因为MYSQL默认立即执行
    mysqli_begin_transaction($conn);            // 开始事务定义
    if(!mysqli_query($conn, "insert into runoob_transaction_test (id) values(8)"))
    {
        mysqli_query($conn, "ROLLBACK");     // 判断当执行失败时回滚
    }
    mysqli_commit($conn);
 

### <span id="alter">ALTER命令</span>  
 修改数据表名或者修改数据表字段时，就需要使用到MySQL ALTER命令  

    ALTER TABLE testalter_tbl DROP i;
    ALTER TABLE testalter_tbl ADD i INT FIRST;
    ALTER TABLE testalter_tbl DROP i;
    ALTER TABLE testalter_tbl ADD i INT AFTER c;

指定新增字段的位置，可以使用MySQL提供的关键字 FIRST (设定位第一列)， AFTER 字段名（设定位于某个字段之后）

需要修改字段类型及名称, 你可以在ALTER命令中使用 MODIFY 或 CHANGE 子句： 

    ALTER TABLE testalter_tbl MODIFY c CHAR(10);

在 CHANGE 关键字之后，紧跟着的是你要修改的字段名，然后指定新字段名及类型：

    ALTER TABLE testalter_tbl CHANGE i j BIGINT;  

修改字段的默认值：

    ALTER TABLE testalter_tbl ALTER i SET DEFAULT 1000  

修改表名使用RENAME子句实现：

    ALTER TABLE testalter_tbl RENAME TO alter_tbl;

### <span id="sy">索引</span>  
索引分单列索引和组合索引，单列索引，即一个索引只包含单个列，一个表可以有多个单列索引，组合索引，即一个索引包含多个列。  

#### 普通索引  

    CREATE INDEX indexName ON mytable(username(length)); //最基本的创建  
    ALTER mytable ADD INDEX [indexName] ON (username(length)) //修改表结构
    CREATE TABLE mytable(  
    ID INT NOT NULL,   
    username VARCHAR(16) NOT NULL,  
    INDEX [indexName] (username(length))  
    );  //创表时直接指定  
    DROP INDEX [indexName] ON mytable; //删除索引  

#### 唯一索引  
索引列的值必须唯一，但允许有空值，如果是组合索引，则列值的组合必须唯一。  

    CREATE UNIQUE INDEX indexName ON mytable(username(length)) 
    ALTER table mytable ADD UNIQUE [indexName] (username(length))
    CREATE TABLE mytable(  
    ID INT NOT NULL,   
    username VARCHAR(16) NOT NULL,  
    UNIQUE [indexName] (username(length))  
    );   

#### 主键  
使用 ALTER 命令添加和删除主键，主键只能作用于一个列上，添加主键索引时，你需要确保该主键默认不为空（NOT NULL）。

    mysql> ALTER TABLE testalter_tbl MODIFY i INT NOT NULL;
    mysql> ALTER TABLE testalter_tbl ADD PRIMARY KEY (i);
    mysql> ALTER TABLE testalter_tbl DROP PRIMARY KEY;//删除指定时只需指定PRIMARY KEY，但在删除索引时，必须知道索引名

#### 显示索引
SHOW INDEX 命令来列出表中的相关的索引信息，可以通过添加 \G 来格式化输出  

    mysql> SHOW INDEX FROM table_name; \G  

### <span id="ls">临时表</span>  
临时表只在当前连接可见，当关闭连接时，Mysql会自动删除表并释放所有空间。

    mysql> CREATE TEMPORARY TABLE SalesSummary (
    -> product_name VARCHAR(50) NOT NULL
    -> , total_sales DECIMAL(12,2) NOT NULL DEFAULT 0.00
    -> , avg_unit_price DECIMAL(7,2) NOT NULL DEFAULT 0.00
    -> , total_units_sold INT UNSIGNED NOT NULL DEFAULT 0
    ); 

默认情况下，当你断开与数据库的连接后，临时表就会自动被销毁。当然你也可以在当前MySQL会话使用 DROP TABLE 命令来手动删除临时表。  

    mysql> DROP TABLE SalesSummary;  

### <span id="fz">复制表</span>  
完整的复制MySQL数据表：
1. 使用 SHOW CREATE TABLE 命令获取创建数据表(CREATE TABLE) 语句，该语句包含了原数据表的结构，索引等。
2. 复制以下命令显示的SQL语句，修改数据表名，并执行SQL语句，通过以上命令 将完全的复制数据表结构。
3. 如果你想复制表的内容，你就可以使用 INSERT INTO ... SELECT 语句来实现

    mysql> SHOW CREATE TABLE runoob_tbl \G;
    *************************** 1. row ***************************
           Table: runoob_tbl
    Create Table: CREATE TABLE `runoob_tbl` (
      `runoob_id` int(11) NOT NULL auto_increment,
      `runoob_title` varchar(100) NOT NULL default '',
      `runoob_author` varchar(40) NOT NULL default '',
      `submission_date` date default NULL,
      PRIMARY KEY  (`runoob_id`),
      UNIQUE KEY `AUTHOR_INDEX` (`runoob_author`)
    ) ENGINE=InnoDB 
    1 row in set (0.00 sec)

    mysql> CREATE TABLE `clone_tbl` (
    -> `runoob_id` int(11) NOT NULL auto_increment,
    -> `runoob_title` varchar(100) NOT NULL default '',
    -> `runoob_author` varchar(40) NOT NULL default '',
    -> `submission_date` date default NULL,
    -> PRIMARY KEY  (`runoob_id`),
    -> UNIQUE KEY `AUTHOR_INDEX` (`runoob_author`)
    -> ) ENGINE=InnoDB;
    Query OK, 0 rows affected (1.80 sec)

    mysql> INSERT INTO clone_tbl (runoob_id,
    ->                        runoob_title,
    ->                        runoob_author,
    ->                        submission_date)
    -> SELECT runoob_id,runoob_title,
    ->        runoob_author,submission_date
    -> FROM runoob_tbl;
    Query OK, 3 rows affected (0.07 sec)
    Records: 3  Duplicates: 0  Warnings: 0

### <span id="ysj">元数据</span>  
#### 获取查询语句影响的记录数  
PHP中使用mysqli_affected_rows( ) 函数  

    $result_id = mysqli_query ($conn_id, $query);
    # 如果查询失败返回 
    $count = ($result_id ? mysqli_affected_rows ($conn_id) : 0);
    print ("$count 条数据被影响\n");  

#### 数据库和数据表列表  
使用 SHOW TABLES 或 SHOW DATABASES 语句来获取数据库和数据表列表  
PHP中： 

    <?php
    $dbhost = 'localhost:3306';  // mysql服务器主机地址
    $dbuser = 'root';            // mysql用户名
    $dbpass = '123456';          // mysql用户名密码
    $conn = mysqli_connect($dbhost, $dbuser, $dbpass);
    if(! $conn )
    {
        die('连接失败: ' . mysqli_error($conn));
    }
    // 设置编码，防止中文乱码
    $db_list = mysqli_query($conn, 'SHOW DATABASES');
    while ($db = mysqli_fetch_object($db_list))
    {
      echo $db->Database . "<br />";
    }
    mysqli_close($conn);
    ?>

#### 获取服务器元数据   
可用于命令提示符和脚本中  
<table>
    <tr><td>命令</td><td>描述</td></tr>
    <tr><td>SELECT VERSION( )</td><td>服务器版本信息</td></tr>
    <tr><td>SELECT DATABASE( )</td><td>当前数据库名 (或者返回空)</td></tr>
    <tr><td>SELECT USER( )</td><td>当前用户名</td></tr>
    <tr><td>SHOW STATUS</td><td>服务器状态</td></tr>
    <tr><td>SHOW VARIABLES</td><td> 服务器配置变量</td></tr>
</table>

### <span id="xl">序列使用</span>  
MySQL序列是一组整数：1, 2, 3, ...，由于一张数据表只能有一个字段自增主键， 如果你想实现其他字段也实现自动增加，就可以使用MySQL序列来实现。  

#### 使用AUTO_INCREMENT  
id无需指定值可实现自动增长，新增的时候无需插入值

    mysql> CREATE TABLE insect
    -> (
    -> id INT UNSIGNED NOT NULL AUTO_INCREMENT,
    ...

#### 获取AUTO_INCREMENT值  
客户端中使用 SQL中的LAST_INSERT_ID( ) 函数来获取最后的插入表中的自增列的值
PHP中通过mysql_insert_id ()函数：

    mysql_query ("INSERT INTO insect (name,date,origin)
    VALUES('moth','2001-09-14','windowsill')", $conn_id);
    $seq = mysql_insert_id ($conn_id);  

#### 重置序列  
删除自增的列，然后重新添加来实现，要非常小心如果同时有新纪录的添加。  

    mysql> ALTER TABLE insect DROP id;
    mysql> ALTER TABLE insect
        -> ADD id INT UNSIGNED NOT NULL AUTO_INCREMENT FIRST,
        -> ADD PRIMARY KEY (id);

#### 设置序列开始值  

    mysql> CREATE TABLE insect
        -> (
        -> id INT UNSIGNED NOT NULL AUTO_INCREMENT = 100,
        -> PRIMARY KEY (id),
        ...

或者在表创建成功之后：

    mysql> ALTER TABLE t AUTO_INCREMENT = 100;  


### <span id="cfsj">处理重复数据</span>  
#### 防止出现重复  
在MySQL数据表中设置指定的字段为 PRIMARY KEY（主键） 或者 UNIQUE（唯一） 索引来保证数据的唯一性。  
NSERT IGNORE INTO与INSERT INTO的区别就是INSERT IGNORE会忽略数据库中已经存在的数据，如果数据库没有数据，就插入新的数据，如果有数据的话就跳过这条数据。  
REPLACE INTO into如果存在primary 或 unique相同的记录，则先删除掉。再插入新记录

#### 统计重复数据  
确定哪列包含的值可能会重复，然后在列选择列表使用COUNT(*)列出那些列，在GROUP BY子句中列出列，最后HAVING子句设置重复数大于1。

    mysql> SELECT COUNT(*) as repetitions, last_name, first_name
    -> FROM person_tbl
    -> GROUP BY last_name, first_name
    -> HAVING repetitions > 1;

#### 过滤重复数据  
  在 SELECT 语句中使用 DISTINCT 关键字或GROUP BY读取数据

    mysql> SELECT DISTINCT last_name, first_name
    -> FROM person_tbl;  

    mysql> SELECT last_name, first_name
    -> FROM person_tbl
    -> GROUP BY (last_name, first_name);  

#### 删除重复数据  

    mysql> CREATE TABLE tmp SELECT last_name, first_name, sex
    ->                  FROM person_tbl;
    ->                  GROUP BY (last_name, first_name, sex);
    mysql> DROP TABLE person_tbl;
    mysql> ALTER TABLE tmp RENAME TO person_tbl;

### <span id="zr">SQL注入</span>  
如果您通过网页获取用户输入的数据并将其插入一个MySQL数据库，那么就有可能发生SQL注入安全的问题。  
SQL注入：通过把SQL命令插入到Web表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令
1. 永远不要信任用户的输入。对用户的输入进行校验，可以通过正则表达式，或限制长度,对单引号和 双"-"进行转换等
2. 永远不要使用动态拼装sql，可以使用参数化的sql或者直接使用存储过程进行数据查询存取
3. 永远不要使用管理员权限的数据库连接，为每个应用使用单独的权限有限的数据库连接
4. 不要把机密信息直接存放，加密或者hash掉密码和敏感的信息
5. 应用的异常信息应该给出尽可能少的提示，最好使用自定义的错误信息对原始错误信息进行包装
6. sql注入的检测方法一般采取辅助软件或网站平台来检测，软件一般采用sql注入检测工具jsky，网站平台就有亿思网站安全平台检测工具。MDCSOFT SCAN等。采用MDCSOFT-IPS可以有效的防御SQL注入，XSS攻击等.

#### 防止SQL注入  
PHP的MySQL扩展提供了mysqli_real_escape_string()函数来转义特殊的输入字符  

    if (get_magic_quotes_gpc()) 
    {
      $name = stripslashes($name);
    }
    $name = mysqli_real_escape_string($conn, $name);
     mysqli_query($conn, "SELECT * FROM users WHERE name='{$name}'");

#### Like语句中的注入  
如果用户输入的值有"_"和"%"，查询结果会有问题。  
在PHP中可使用addcslashes()函数来处理：

    $sub = addcslashes(mysqli_real_escape_string($conn, "%something_"), "%_");
    // $sub == \%something\_
     mysqli_query($conn, "SELECT * FROM messages WHERE subject LIKE '{$sub}%'");

addcslashes() 函数在指定的字符前添加反斜杠。
`addcslashes(string,characters)`
string时要检查的字符串，characters规定影响的字符或字符范围。

### <span id="dcdr">导出导入数据</span>   
#### 导出数据  
#### 使用 SELECT ... INTO OUTFILE 语句导出数据  
还可通过选项设置输出的格式 

    mysql> SELECT * FROM runoob_tbl 
    -> INTO OUTFILE '/tmp/tutorials.txt';  

属性：
1. LOAD DATA INFILE将文件读回数据库  
2. SELECT...INTO OUTFILE 'file_name'形式的SELECT可以把被选择的行写入一个文件中
3. 输出不能是一个已存在的文件。防止文件数据被篡改
4. 需要有一个登陆服务器的账号来检索文件。否则 SELECT ... INTO OUTFILE 不会起任何作用
5. 在UNIX中，该文件被创建后是可读的，权限由MySQL服务器所拥有。这意味着，虽然你就可以读取该文件，但可能无法将其删除

#### 导出表作为原始数据  
mysqldump是mysql用于转存储数据库的实用程序，产生一个SQL脚本，包含从头重新创建数据库所必需的命令CREATE TABLE INSERT等。  
需要使用 --tab 选项来指定导出文件指定的目录，该目标必须是可写的。
如 将数据表 runoob_tbl 导出到 /tmp 目录中：

    $ mysqldump -u root -p --no-create-info \
            --tab=/tmp RUNOOB runoob_tbl
    password ******  

#### 导出SQL格式的数据  

    $ mysqldump -u root -p RUNOOB runoob_tbl > dump.txt
    password ******  

导出整个数据库的数据：

    $ mysqldump -u root -p RUNOOB > database_dump.txt
    password ******

备份所有数据库：

    $ mysqldump -u root -p --all-databases > database_dump.txt
    password ******

#### 将数据表及数据库拷贝至其他主机  
在 mysqldump 命令中指定数据库名及数据表。

源主机上数据备份：

    $ mysqldump -u root -p database_name table_name > dump.txt
    password *****  

导入：

    $ mysql -u root -p database_name < dump.txt
    password *****

直接导入远程服务器，保证可互相访问：

    $ mysqldump -u root -p database_name \
       | mysql -h other-host.com database_name  //使用管道
    

#### 导入数据  
#### 使用 LOAD DATA 导入数据   
从当前目录中读取文件 dump.txt ，将该文件中的数据插入到当前数据库的 mytbl 表中：

    mysql> LOAD DATA LOCAL INFILE 'dump.txt' INTO TABLE mytbl;

默认情况下是按照数据文件中列的顺序插入数据的，如果数据文件中的列与插入表中的列不一致，则需要指定列的顺序。
如，在数据文件中的列顺序是 a,b,c，但在插入表的列顺序为b,c,a：

    mysql> LOAD DATA LOCAL INFILE 'dump.txt' 
    -> INTO TABLE mytbl (b, c, a);

#### 使用 mysqlimport 导入数据
mysqlimport的大多数选项直接对应LOAD DATA INFILE子句  

    $ mysqlimport -u root -p --local --fields-terminated-by=":" \
       --lines-terminated-by="\r\n"  database_name dump.txt
    password *****

    $ mysqlimport -u root -p --local --columns=b,c,a \     //设置列的顺序
    database_name dump.txt
    password *****   

