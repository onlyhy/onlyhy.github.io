---
layout: post
title:  "Vue组件学习笔记"
date:   2018-04-12 10:00:00 +00:00
categories: JavaScript
author: onlyhy
---

读[Vue.js官方文档组件部分](https://cn.vuejs.org/v2/guide/components.html)所记

## 组件（Component）

  * 可以扩展HTML元素，封装可重用的代码。
  * 有些情况下，也可表现为用is特性进行扩展的原生HTML元素。
  * Vue 组件同时也都是 Vue 的实例，所以可接受相同的选项对象 (除了一些根级特有的选项) 并提供相同的 *生命周期钩子* （不懂含义，后期学习）

### 一、使用组件

#### 1.1 全局注册

    Vue.component(tagName,options)

  1. tagName最优是遵循W3C规则（小写，包含一个短杠）
  2. 组件在实例模板中使用，要确保在初始化根实例<strong>之前</strong>注册组件

#### 1.2 局部注册

可用某个Vue实例或组件的实例选项 *components* 注册仅在其作用域可用的组件

    var Child = {
    template: '<div>A custom component!</div>'
    }
    new Vue({
      // ...
      components: {
        // <my-component> 将只在父组件模板中可用
        'my-component': Child
    }
    })

#### 1.3 DOM模板解析注意事项

DOM作为模板时，会受到HTML本身的限制，像`<ul>` `<ol>` `<table>`这种元素允许包含的内容有限制等，对于这些受限制的元素使用自定义组件有时会导致被当做无效内容等问题，<strong>可用`is` 特性解决</strong>。

    <table>
    <tr is="my-row"></tr>
    </table>

***注：使用如下字符串模板，则无限制!***

  1. `<script type="text/x-template">`
  2. JavaScript 内联模板字符串
  3. `.vue` 组件
  
#### 1.4 data必须是函数

在组件实例中 `data` 必须是一个函数


#### 1.5 组件组合

 常见的父子组件，之间相互通信，但需要一个接口将父子组件解耦，保证每个组件的相对隔离，提高维护性和复用性。
 Vue中，父子组件prop向下传递，事件向上传递。父组件通过prop给子组件下发数据，子组件通过事件给父组件发消息。

### 二、Prop 

#### 2.1 Prop传递数据

子组件显式地用props选项声明它预期的数据

    Vue.component('child', {
    // 声明 props
    props: ['message'],
    // 就像 data 一样，prop 也可以在模板中使用
    // 同样也可以在 vm 实例中通过 this.message 来使用
    template: '<span>{{ message }}</span>'
    })

 传入一个普通字符串：
    <child message="hello!"></child>

 结果：
    `hello!`

#### 2.2 camelCase(驼峰式命名) vs. kebab-case(短横线分隔式命名)

 HTML特性不区分大小写，则当不是使用字符串模板（字符串模板，无限制）时，camelCase的prop需要转换为对应的kebab-case

    Vue.component('child', {
    // 在 JavaScript 中使用 camelCase
    props: ['myMessage'],
     template: '<span>{{ myMessage }}</span>'
    })

    <!-- 在 HTML 中使用 kebab-case -->
    <child my-message="hello!"></child> 

#### 2.3 动态Prop

 用`v-bind`动态的将prop绑定到父组件的数据，当父组件数据变化时，该变化也会传给子组件

    <div id="prop-example-2">
    <input v-model="parentMsg">
    <br>
    <child v-bind:my-message="parentMsg"></child>
    </div>

    new Vue({
    el: '#prop-example-2',
    data: {
    parentMsg: 'Message from parent'
    }
    })

 想把一个对象的所有属性作为`prop`传递，用不带任何参数的`v-bind`

    todo: {
    text: 'Learn Vue',
    isComplete: false
    }

 直接v-bind:

    <todo-item v-bind="todo"></todo-item>

 等价于：

    <todo-item
    v-bind:text="todo.text"
    v-bind:is-complete="todo.isComplete"
    </todo-item>

#### 2.4 字面量语法vs动态语法

**常见错误** ：使用字面量语法传递数值。

    <!-- 传递了一个字符串 "1" -->
    <comp some-prop="1"></comp>
    <!-- 传递真正的数值 -->
    <comp v-bind:some-prop="1"></comp>

1. 这是一个字面量prop，值是字符串"1"，而不是数值1。
2. 需要用<strong>`v-bind`</strong>传JS的数值 

#### 2.5 单向数据流

Prop是单向绑定，父组件属性--->子组件，子组件--X-->父组件。
子组件随父组件的更新而更新，<strong>不该在子组件内部改prop</strong>

想要修改prop中数据：

1. Prop 作为初始值传入后，子组件想把它当作局部数据来用；
2. Prop 作为原始数据传入，由子组件处理成其它数据输出。

则对应解决方法：

1. 定义一个局部变量，并用 prop 的值初始化它
2. 定义一个计算属性，处理 prop 的值并返回

**注：JavaScript 中对象和数组是引用类型，指向同一个内存空间，如果 prop 是一个对象或数组，在子组件内部改变它会影响父组件的状态。**

#### 2.6 Prop验证

为组件的prop指定验证规则，若传入数据不符合要求则警告
<strong>指定规则要用对象的形式定义prop,不能用字符串数组</strong>

`type`可以是原生或自定义构造器
`prop`验证在组件实例创建之前，则data、computed、methods等实例属性不可使用

    Vue.component('example', {
    props: {
    // 基础类型检测 (`null` 指允许任何类型)
    propA: Number,
    // 可能是多种类型
    propB: [String, Number],
    // 必传且是字符串
    propC: {
      type: String,
      required: true
    },
    // 数值且有默认值
    propD: {
      type: Number,
      default: 100
    },
    // 数组/对象的默认值应当由一个工厂函数返回
    propE: {
      type: Object,
      default: function () {
        return { message: 'hello' }
      }
    },
    // 自定义验证函数
    propF: {
      validator: function (value) {
        return value > 10
      }
    }
    }
    })

### 三、非Prop特性

可直接传入组件，不需要定义prop。组件可以接收任意传入的特性，这些特性都会被添加到组件的根元素上。

#### 3.1 替换/合并现有特性

比如当定义了不同的class值，分别来自组件自身和父组件，Vue对`class`和`style`这两个特性的值会做合并（merge）操作


### 四、自定义事件

用于子组件跟父组件通信

#### 4.1 用v-on绑定自定义事件

1. 使用`$on(eventName) `监听事件
2. 使用` $emit(eventName, optionalPayload) `触发事件
3. 父组件可以在使用子组件的地方用`v-on`来监听子组件触发的事件（*不能用`$on`监听子组件，必须在模板中用`v-on`*）

#### 4.2 给组件绑定原生事件

在组件的根元素上监听一个原生事件，用`v-on`的修饰符`.native`

    <my-component v-on:click.native="doTheThing"></my-component>

#### 4.3 .sync修饰符

只作为一个编译时的语法糖，会被扩展为一个自动更新父组件属性的`v-on`监听器

#### 4.4 使用自定义事件的表单输入组件

自定义事件可用来创建自定义的表单输入组件，用`v-model`进行数据双向绑定

`v-model`生效：
1. 接受一个`value` prop
2. 有新值时触发`input`事件并将新值作为参数

#### 4.5 自定义组件的v-model

默认下，`v-model`使用`value` prop 和`input`事件，但单选框之类的将`value`用作其他。
可用组件的`model` 选项可以修改而避免冲突

#### 4.6 非父子组件的通信

1. 简单情况下：用一个空的Vue实例作为事件总线
2. 复杂情况：使用专门的 *状态管理模式*(详见官方文档[状态管理](https://cn.vuejs.org/v2/guide/state-management.html))




### 五、使用插槽分发内容

<strong>内容分发:</strong>让组件可以组合，混合父组件的内容与子组件自己的模板
Vue实现了一个内容分发API，使用`<slot>`元素作为原始内容的插槽。

简单来说：
**props可以将数据从父组件传入子组件**
**slot可以把html从父组件传入子组件**

可把`slot`理解成一个占位符，在子组件定义好一个`slot`标签，父组件传值时就替换该标签内容。

#### 5.1 编译作用域

  组件作用域：
   1. 父组件模板的内容在父组件作用域内编译
   2. 子组件模板的内容在子组件作用域内编译

#### 5.2 单个插槽

子组件模板包含至少一个`<slot>`插口，否则父组件内容会被丢弃。
最初`<slot>`中的任何内容都被视为 *备用内容*，只有在宿主元素为空，且没有要插入的内容才显示 *备用内容*

#### 5.3 具名插槽

多个插槽可有不同的名字，用`name`来配置如何分发内容(子组件),具名插槽匹配内容片断中有对应`slot`特性的元素(父组件)

仍然可以有一个 *匿名插槽*,是 *默认插槽*，作为备用插槽

#### 5.4 作用域插槽

用作一个能被传递数据的可重用模板，来代替已渲染好的元素。
1. 子组件中，将数据传递给插槽。
2. 父组件中，必须存在具有`slot-scope`的`<template>`元素，是作用域的模板，`slot-scope`的值被用作一个临时变量名，用来接收从子组件传来的prop对象

**注：**
`slot-scope`能被用在任意元素或组件中而不再局限于`<template>`


### 六、动态组件

通过使用保留的`<component>`元素，对其`is`特性进行动态绑定，可在一个挂载点动态切换多个组件，也可直接绑定到组件对象上。

#### `keep-alive`

把非活动的组件缓存（保留在内存中，保留它的状态或避免重新渲染）

### 七、杂项

#### 7.1 编写可复用组件

可复用组件要定义一个清晰的公开接口，也不要对其使用的外层数据作任何假设

Vue组件的API包括三部分：prop、事件、插槽
* Prop允许外部环境传递数据给组件
* 时间允许组件内触发外部环境的副作用
* 插槽允许外部环境将额外的内容组合在组件中

使用`v-bind`和`v-on`的简写，模板会更清楚。

#### 7.2 子组件引用

当需要在JS中直接访问子组件，使用`ref`为子组件指定一个引用ID

#### 7.3 异步组件（没懂）

#### 7.4 高级异步组件（没懂）

#### 7.5 组件命名规定

1. 当注册组件 (或者 prop) 时，可以使用 kebab-case (短横线分隔命名)、camelCase (驼峰式命名) 或 PascalCase (单词首字母大写命名)。

2. 在HTML模板中，使用kebab-case (短横线分隔命名)

3. 在字符串模板中，不受HTML大小写的限制：
  * kebab-case
  * camelCase 或 kebab-case (如果组件已经被定义为 camelCase)
  * kebab-case、camelCase 或 PascalCase (如果组件已经被定义为 PascalCase)

#### 7.6 递归组件

只有当组件有`name`选项时，才可以在模板内递归地调用自己
要确保递归调用有终止条件否则会导致错误

#### 7.7 组件间的循环利用

当模块化管理工具不知先解析哪个模块，要在其中一个组件中告诉它顺序

#### 7.8 内联模板

如果子组件有 `inline-template` 特性，组件将把它的内容当作它的模板，而不是把它当作分发内容。这让模板编写起来更灵活。

但是 `inline-template` 让模板的作用域难以理解。使用 `template` 选项在组件内定义模板或者在 .vue 文件中使用 `template` 元素才是最佳实践。

#### 7.9 X-Template

定义模板的方式：在 JavaScript 标签里使用 `text/x-template` 类型（type），并且指定一个 id。
避免使用

#### 7.10 对低开销的静态组件使用`v-once`

尽管在 Vue 中渲染 HTML 很快，不过当组件中包含大量静态内容时，可以考虑使用 `v-once` 将渲染结果缓存起来.





To Be Continued…





















    














