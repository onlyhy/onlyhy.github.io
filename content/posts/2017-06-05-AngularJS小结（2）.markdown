+++
draft = true
title = "菜鸟教程AngularJS文档小结（2）"
date = 2017-06-05T00:00:00+00:00
categories = ["AngularJS"]
authors = ["onlyhy"]
+++

## 参考手册
   <a>http://www.runoob.com/angularjs/angularjs-reference.html</a>  

### 表单  
   是输入控件的集合，控件如input,select,button,textarea等。

#### 数据绑定  
   使用ng-model指令实现数据绑定  

    <input type="text" ng-model="firstname">

    var app = angular.module('myApp', []);
    app.controller('formCtrl', function($scope) {
    $scope.firstname = "John";
    }); 

 ng-model与复选框、单选框结合使用，

### 输入验证  
   客户端和服务器端的验证都是必须的。  
   表单属性novalidate用于禁用浏览器默认的验证

    <span style="color:red" ng-show="myForm.email.$dirty && myForm.email.$invalid">
    <span ng-show="myForm.email.$error.required">邮箱是必须的。</span>
    <span ng-show="myForm.email.$error.email">非法的邮箱。</span>
    </span> 
    <input type="submit"
    ng-disabled="myForm.user.$dirty && myForm.user.$invalid ||
    myForm.email.$dirty && myForm.email.$invalid">

<table>
    <tr>
        <td>属性</td>
        <td>描述</td>
    </tr>
    <tr>
        <td>$dirty</td>
        <td>表单有填写记录</td>
    </tr>
    <tr>
        <td>$valid</td>
        <td>字段内容合法</td>
    </tr>
    <tr>
        <td>$invalid</td>
        <td>字段内容非法</td>
    </tr> 
    <tr>
        <td>$pristine</td>
        <td>表单没有填写记录</td>
    </tr> 
</table>  

### API(Application Programming Interface应用程序编程接口)  
   常用于比较对象，迭代对象，转换对象
<table>
    <tr>
        <td>API</td>
        <td>描述</td>
    </tr>
    <tr>
        <td>angular.lowercase()</td>
        <td>转换字符串为小写</td>
    </tr>
    <tr>
        <td>angular.uppercase()</td>
        <td>转换字符串为大写</td>
    </tr>
    <tr>
        <td>angular.isString()</td>
        <td>判断给定的对象是否为字符串，如果是返回true</td>
    </tr>
    <tr>
     <td>angular.isNumber()</td>
     <td>判断给定的对象是否为数字，如果是返回true</td>
    </tr>
</table>

    <div ng-app="myApp" ng-controller="myCtrl">
    <p>{{ x1 }}</p>
    <p>{{ x2 }}</p>
    </div>
    <script>
    var app = angular.module('myApp', []);
    app.controller('myCtrl', function($scope) {
    $scope.x1 = "JOHN";
    $scope.x2 = angular.lowercase($scope.x1);
    });
    </script>  

### 包含  
   可在HTML中包含HTML
   
    <div ng-include="'runoob.htm'"></div>

   还可包含AngularJS代码  

    <div ng-include="'sites.htm'"></div>

### 动画  
   动画是通过改变HTML元素产生的动态变化效果，可配合CSS使用，需要引入angular-animate.min.js库，还需要在应用中使用模型ngAnimate。  

    <body ng-app="ngAnimate">  

   如果应用已经设置了应用名，可以把ngAnimate直接添加在模型中。

    <body ng-app="myApp">
    <h1>隐藏 DIV: <input type="checkbox" ng-model="myCheck"></h1>
    <div ng-hide="myCheck"></div>
    <script>
    var app = angular.module('myApp', ['ngAnimate']);
    </script>  

### 依赖注入  （Dependency Injection）简称DI  
   一个或更多的依赖（或服务）被注入（或通过引用传递）到一个独立的对象（或客户端）中，成为该客户端状态的一部分。
#### 没事你不要来找我，有事我会去找你！ （哈哈） 
   5个核心组件：value,factory,service,provider,constant
#### value  
   JS对象，用于向控制器传递值（配置阶段）  
#### factory  
   一个函数用于返回值，在service和controller需要时创建，通常用于计算和返回值。
#### provider
   听过provider创建一个service、factory等，provider中提供了一个factory方法get(),用于返回value/service/factory。
#### constant
   常量，用来配置阶段传递数值，注意这个常量在配置阶段是不可用的。  

### 路由
   允许通过不同的URL访问不同的内容，可实现多视图的单页Web应用。
   在单页Web应用中AngularJS通过 #+标记 实现，如：http://runoob.com/#/first
   路由通过#+标记区分不同的逻辑页面并将不同的页面绑定到对应的控制器上。

#### 路由设置对象  
   路由可以通过不同的模板来实现。
   $routeProvider.when函数的第一个参数是URL或者URL正则规则，第二个参数为路由配置对象。  

    $routeProvider.when(url, {
    template: string,
    templateUrl: string,
    controller: string, function 或 array,
    controllerAs: string,
    redirectTo: string, function,
    resolve: object<key, function>
    });  

   template:在ng-view中插入简单的HTML内容  
   templateUrl:在ng-view中插入HTML模板文件  
   controller:function、string或数组类型，在当前模板上执行的controller函数，生成新的scope。  
   controllerAs:string类型，为controller指定别名  
   redirectTo:重定向的地址  
   resolve:指定当前controller所依赖的其他模块  





