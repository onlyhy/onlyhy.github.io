+++
draft = true
title = "webpack手记"
date = 2017-07-10T00:00:00+00:00
categories = ["Webpack"]
authors = ["onlyhy"]
+++  

### 一、常规
例：

1. index.html中有src链到bundle.js(最终打包生成的文件)

2. 创建runoob1.js和runoob1.js

3. runoob1.js中require(./runoob2.js)

4. 打包webpack runoob1.js bundle.js  

5. 最终index中先执行runoob1.js，其他模块在require时用到 



### 二、LOADER:

Webpack 本身只能处理 JavaScript 模块，如果要处理其他类型的文件，就需要使用 loader 进行转换。  
要用css文件，需要使用css-loader和style-loader。  
css-loader:遍历css文件，找到url()表达式然后处理。  
style-loader：把原来的css代码插入到页面的一个style标签中。

`cnpm install css-loader style-loader -g `  

将会生成node_modules 目录，是 css-loader 和 style-loader 的安装目录。


例：

1. 创建一个style.css文件  
2. 修改runoob1.js，添加语句：require("!style-loader!css-loader!./style.css");
3. 打包  `webpack runoob1.js bundle.js`

*require CSS 文件的时候都要写 loader 前缀 !style-loader!css-loader!

*可以根据模块类型（扩展名）来自动绑定需要的 loader：
  
 1. 将runoob1.js中语句改为 require("./style.css")
 2. 打包  
 `webpack runoob1.js bundle.js --module-bind 'css=style-loader!css-loader'`


### 三、配置文件：
可以将一些编译选项放在配置文件中  

创建webpack.config.js 文件
    
        module.exports = {
        entry: "./runoob1.js",
        output: {
            path: __dirname,
            filename: "bundle.js"
        },
        module: {
            loaders: [
                { test: /\.css$/, loader: "style-loader!css-loader" }
            ]
        }
    };

直接执行webpack,webpack会默认载入当前目录的webpack.config.js 文件

### 四、插件：
插件在 webpack 的配置信息 plugins 选项中指定，完成一些 loader 不能完成的。
webpack 自带一些插件，可以通过 cnpm 安装一些插件

`cnpm install webpack --save-dev ` 

如 BannerPlugin 插件，用于在文件头部输出一些注释信息。

    var webpack=require('webpack');
    module.exports = {
        entry: "./runoob1.js",
        output: {
            path: __dirname,
            filename: "bundle.js"
        },
        module: {
            loaders: [
                { test: /\.css$/, loader: "style-loader!css-loader" }
            ]
        },
        plugins:[
        new webpack.BannerPlugin('菜鸟教程 webpack 实例')
        ]
    };

### 五、开发环境
1. 项目逐渐变大，webpack 的编译时间会变长，可以通过参数让编译的输出内容带有进度和颜色
     
     `webpack --progress --colors`

2. 不想每次修改模块后都重新编译，就启动监听模式，开启监听模式后，没有变化的模块会在编译后缓存到内存中，而不会每次都被重新编译，所以监听模式的整体速度是很快的
  
     `webpack --progress --colors --watch`  


3. 使用 webpack-dev-server 开发服务,就能通过 localhost:8080 启动一个 express 静态资源 web 服务器，并且会以监听模式自动运行 webpack。  
   
在浏览器打开 http://localhost:8080/ 或 http://localhost:8080/webpack-dev-server/ 可以浏览项目中的页面和编译后的资源输出，并且通过一个 socket.io 服务实时监听它们的变化并自动刷新页面

`cnpm install webpack-dev-server -g`

`webpack-dev-server --progress --colors`














