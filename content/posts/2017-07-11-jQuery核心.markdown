+++
draft = true
title = "jQuery核心部分回顾随笔"
date = 2017-07-11T00:00:00+00:00
categories = ["JavaScript"]
authors = ["onlyhy"]
+++

### AJAX
#### load()
load() 方法从服务器加载数据，并把返回的数据放入被选元素中  
`$(selector).load(URL,data,callback);` 
如：  
`$("#div1").load("demo_test.txt");`  
`$("#div1").load("demo_test.txt #p1");`  

callback规定了方法完成后要允许的回调函数，可设置不同的参数：
responseTxt - 包含调用成功时的结果内容；statusTXT - 包含调用的状态；xhr - 包含 XMLHttpRequest 对象  

    $("button").click(function(){
    $("#div1").load("demo_test.txt",function(responseTxt,statusTxt,xhr){
    if(statusTxt=="success")
      alert("外部内容加载成功!");
    if(statusTxt=="error")
      alert("Error: "+xhr.status+": "+xhr.statusText);
     });
    });
#### get()/post()
用于通过 HTTP GET 或 POST 请求从服务器请求数据  
* GET ： 从指定的资源请求数据，基本上用于从服务器获得（取回）数据，可能返回缓存数据
* POST ： 向指定的资源提交要处理的数据，也可用于从服务器获取数据，不会缓存数据，常用于连同请求一起发送数据。  
$.get(URL,callback);

    $("button").click(function(){
      $.get("demo_test.php",function(data,status){
        alert("数据: " + data + "\n状态: " + status);
      });
    });  

$.post(URL,data,callback);

    $("button").click(function(){
        $.post("/try/ajax/demo_test_post.php",
        {
            name:"菜鸟教程",
            url:"http://www.runoob.com"
        },
            function(data,status){
            alert("数据: \n" + data + "\n状态: " + status);
        });
    });


### each方法  
jQuery.each(array,callback)
jQuery.each(object,callback)  
callback如果返回值为false停止循环
### 查找数组中索引inArray  
jQuery.inArray()用于在数组中搜索指定的值，并返回，不存在则返回-1  
jQuery.inArray(value,array,[formIndex])查找的起始值，默认为0

### trim()  
jQuery.trim()去除字符串两端空白字符

### DOM元素获取get方法  
从0开始索引，.get([index])  
从后向前索引，传递负索引值，起始值为-1  

### DOM元素获取index方法  
从匹配的元素中搜索给定元素的索引值，从0开始计数
`$("li").index(docuemnt.getElementById("text2"))`
`$("li").index($("#test2"))`

### 插件 
### Validation Plugin  

1. 基本API  
* method：验证方法，校验逻辑；rule：验证规则
* validate()核心方法 定义基本的校验规则和配置  
* 基本验证方法：

<table>
    <tr>
        <td>方法</td>
        <td>意义</td>
        <td>方法</td>
        <td>意义</td>
    </tr>
    <tr><td>required</td>
        <td>必填</td>
        <td>remote</td>
        <td>远程校验</td></tr>
    <tr><td>minlength/maxlength</td>
        <td>最小/最大长度</td>
        <td>rangelength[,]</td>
        <td>长度范围</td></tr>
    <tr><td>min/max</td>
        <td>最小/最大值</td>
        <td>range</td>
        <td>值范围</td></tr>
    <tr><td>email</td>
        <td>email格式</td>
        <td>url</td>
        <td>url格式</td></tr>
    <tr><td>date</td>
        <td>日期</td>
        <td>dateISO</td>
        <td>ISO日期即yyyy/mm/dd或yyyy-mm-dd</td></tr>
    <tr><td>number</td>
        <td>数字</td>
        <td>digits</td>
        <td>整数，非负整数</td></tr>
    <tr><td>equalTo</td>
        <td>与另一个元素值相等</td>
        <td></td>
        <td></td></tr>
</table>
2. 高级API
* valid()方法 检查表单或元素是否有效

* rules()方法 获取表单元素的校验规则
rules("add",rules) 增加表单元素校验规则
如:
`$("#username").rules("add",{minlength=2})`
rules("remove",rules) 删除表单元素校验规则
可remove多个，用空格隔开  

* validator对象
validate方法返回的对象  
validator.form() 表单是否有效
validator.element(element) 某个元素是否有效  
validator.resetForm() 表单恢复到验证表单前的状态  
validator.showErrors(errors) 针对某个元素显示特定的错误信息  
validator.numberOfInvalids() 返回无效的元素数量  

* validator对象静态方法
jQuery.validator.addMethod(name,method[,message]) 增加自定义校验方法
jQuery.validator.format(template,argument,argumentN...) 格式化字符串 
jQuery.validator.setDefaults(options)修改插件默认设置
jQuery.validator.addClassRules(name,rules)为名为name的class增加验证类型  

* validate()方法配置


* 选择器扩展
* :blank  选择所有值为空的元素
* :filled  选择所有值不为空的元素
* :unchecked  选择所有没有被选中的元素

3. 自定义验证方法  
jQuery.validator.addMethod(name,method[,message])
name：方法名称  
method：function(value,element,params)方法逻辑  
message：提示消息  
additional-method.js  包含了很多扩展验证方法

所有提交的表单数据，都要验证2次，客户端和服务器端

### Accordion 用于创建折叠菜单  
通常与嵌套的列表、定义列表或嵌套的 div 一起使用  

### Autocomplete 根据用户输入值进行搜索和过滤  
让用户快速找到并从预设值列表中选择  

    $(function() {
    var availableTags = [
      "ActionScript",
      "AppleScript",
      "Asp",
      "BASIC",
      "C",
      "C++",
      "Clojure",
      "COBOL",
      "ColdFusion",
      "Erlang",
      "Fortran",
      "Groovy",
      "Haskell",
      "Java",
      "JavaScript",
      "Lisp",
      "Perl",
      "PHP",
      "Python",
      "Ruby",
      "Scala",
      "Scheme"
    ];
    $( "#tags" ).autocomplete({
      source: availableTags
    });
      });
       

       <div class="ui-widget">
      <label for="tags">Tags: </label>
      <input id="tags">
    </div>  

### Growl 插件(消息提醒)  
很容易地在一个覆盖层显示反馈消息。消息会在一段时间后自动消失，不需要单击"确定"按钮等。  

    $(function() {
    $.growl({
      title: "消息标题",
      message: "消息内容!"
    });
    $('.error').click(function(event) {
      event.preventDefault();
      event.stopPropagation();
      return $.growl.error({
          title: "错误标题",
        message: "错误消息内容!"
      });
    });
    $('.notice').click(function(event) {
      event.preventDefault();
      event.stopPropagation();
      return $.growl.notice({
          title: "提醒标题",
        message: "提醒消息内容!"
      });
    });
    
    return $('.warning').click(function(event) {
      event.preventDefault();
      event.stopPropagation();
      return $.growl.warning({
          title: "警告标题",
        message: "警告消息内容!"
      });
    });
    


### Password Validation（密码验证）  
两种组件：
1. 评价密码的相关因素的功能：比如大小写字母的混合情况、字符（数字、特殊字符）的混合情况、长度、与用户名的相似度（可选的）
2. 使用评价功能显示密码强度的验证插件自定义方法。显示的文本可以被本地化  

### Prettydate  
为表单提供了强大的验证功能，需本地化该插件，请在 $.prettyDate.messages 中重写属性。

### Tooltip  
取代了原生的工具提示框，让它们可自定义，您只需要调整它们的内容、位置和外观

     $(function() {
    $( document ).tooltip();
      });
      </script>
      <style>
      label {
    display: inline-block;
    width: 5em;
    }  

### Treeview树型菜单插件 
提供了一个无序灵活的可折叠的树形菜单。试用于一些菜单的导航，支持基于 cookie 的持久性菜单。  

    $(document).ready(function(){
        $("#browser").treeview({
            toggle: function() {
                console.log("%s was toggled.", $(this).find(">span").text());
            }
        });

        $("#add").click(function() {
            var branches = $("<li><span class='folder'>New Sublist</span><ul>" +
                "<li><span class='file'>Item1</span></li>" +
                "<li><span class='file'>Item2</span></li></ul></li>").appendTo("#browser");
            $("#browser").treeview({
                add: branches
            });
        });
    });
