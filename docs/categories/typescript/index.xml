<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TypeScript on oooonlyhy</title>
    <link>http://onlyhy.github.io/categories/typescript/</link>
    <description>Recent content in TypeScript on oooonlyhy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 02 Jun 2017 00:00:00 +0000</lastBuildDate><atom:link href="http://onlyhy.github.io/categories/typescript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TypeScript基础知识</title>
      <link>http://onlyhy.github.io/posts/2017-06-02-typescript/</link>
      <pubDate>Fri, 02 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>http://onlyhy.github.io/posts/2017-06-02-typescript/</guid>
      <description>简介    TypeScript是JS的一个超集（以下简称TS），扩展了JS的语法。因此现有的JS代码可与TS一起工作不用修改，TS通过类型注解提供编译时的静态类型检查。TS可处理已有的JS代码，并只对其中的TS代码进行编译。
语法特性    类 Classes
接口 Interfaces
模块 Modules
类型注解 Type annotations
编译时类型检查 Compile time type checking
Arrow 函数 (类似 C# 的 Lambda 表达式)
安装    这里选用Node.js包管理器（npm）
npm install -g typescript  安装完成后，可使用TS编译器，名称为tsc，可将编译结果生成js文件。
编译TS文件，使用命令：
tsc filename.ts  编译成功后，会在同意目录下生成一个同名js文件。
类型批注    提供静态类型以在编译时启动类型检查，对于基本类型的批注是number,bool,string,弱或动态类型的结构是any类型。 类型批注可以被导出到一个单独的声明文件以让使用类型的已被编译为JavaScript的TypeScript脚本的类型信息可用。批注可以为一个现有的JavaScript库声明。
当类型没有给出时，TypeScript编译器利用类型推断以推断类型。如果由于缺乏声明，没有类型可以被推断出，那么它就会默认为是动态的any类型。
function area(shape: string, width: number, height: number) { var area = width * height; return &amp;quot;I&#39;m a &amp;quot; + shape + &amp;quot; with an area of &amp;quot; + area + &amp;quot; cm squared.</description>
    </item>
    
  </channel>
</rss>
