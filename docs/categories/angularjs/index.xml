<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AngularJS on oooonlyhy</title>
    <link>http://onlyhy.github.io/categories/angularjs/</link>
    <description>Recent content in AngularJS on oooonlyhy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 06 Jun 2017 00:00:00 +0000</lastBuildDate><atom:link href="http://onlyhy.github.io/categories/angularjs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>菜鸟教程AngularJS2教程笔记（一）</title>
      <link>http://onlyhy.github.io/posts/2017-06-06-angularjs21/</link>
      <pubDate>Tue, 06 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>http://onlyhy.github.io/posts/2017-06-06-angularjs21/</guid>
      <description>前言    AngularJS2基于ES6开发，需要具备基础知识：HTML、CSS、JS、NPM、TypeScript
God!!    AngularJS2.x和AngularJS1.x的区别类似Java和JavaScript的区别，惊不惊喜？意不意外？
运行条件    ES5浏览器需要以下模块加载器：
systemjs-通用模块加载器，es6-module-loader-ES6模块加载器，traceur-ES6转码器
JS环境配置    创建配置文件    创建目录    $ mkdir angular-quickstart $ cd angular-quickstart  载入需要的库    推荐使用npm作为包管理工具，创建package.json,使用淘宝的npm镜像
$ npm install -g cnpm --registry=https://registry.npm.taobao.org $ cnpm install  angular-quickstart目录下会生成一个node_modules目录，包含了需要的模块
创建Angular组件    组件Component是应用的基础和核心，一个组件包装了一个特定的功能，组件之间协同工作以组装成一个完整的应用程序。
一般，一个组件就是一个用于控制视图模板的JS类。 在angular-quickstart创建一个app的目录：
$ mkdir app $ cd app  添加组件文件app.component.js
(function(app) { app.AppComponent = ng.</description>
    </item>
    
    <item>
      <title>菜鸟教程AngularJS2教程笔记（三）</title>
      <link>http://onlyhy.github.io/posts/2017-06-06-angularjs23/</link>
      <pubDate>Tue, 06 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>http://onlyhy.github.io/posts/2017-06-06-angularjs23/</guid>
      <description>数据显示    将数据显示到用户界面，有三种方式：
 通过插值表达式显示组件的属性 通过 NgFor 显示数组型属性 通过 NgIf 实现按条件显示  一、通过插值表达式显示组件的属性    {{属性名}}
import { Component } from &#39;@angular/core&#39;; @Component({ selector: &#39;my-app&#39;, template: ` &amp;lt;h1&amp;gt;{{title}}&amp;lt;/h1&amp;gt; &amp;lt;h2&amp;gt;我喜欢的网站: {{mySite}}&amp;lt;/h2&amp;gt; ` }) export class AppComponent { title = &#39;站点列表&#39;; mySite = &#39;菜鸟教程&#39;; }  模板是包在反引号（`）中的多行字符串，不是单引号！！！！！！
二、通过 NgFor 显示数组型属性    @Component({ selector: &#39;my-app&#39;, template: ` &amp;lt;h1&amp;gt;{{title}}&amp;lt;/h1&amp;gt; &amp;lt;h2&amp;gt;我喜欢的网站: {{mySite}}&amp;lt;/h2&amp;gt; &amp;lt;p&amp;gt;网站列表:&amp;lt;/p&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li *ngFor=&amp;quot;let site of sites&amp;quot;&amp;gt;// ngFor 指令来显示 sites 列表中的每一个条目,不要忘记加*号！！ {{ site }} &amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; ` }) export class AppComponent { title = &#39;站点列表&#39;; sites = [&#39;菜鸟教程&#39;, &#39;Google&#39;, &#39;Taobao&#39;, &#39;Facebook&#39;]; mySite = this.</description>
    </item>
    
    <item>
      <title>菜鸟教程AngularJS2教程笔记（二）</title>
      <link>http://onlyhy.github.io/posts/2017-06-06-angularjs22/</link>
      <pubDate>Tue, 06 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>http://onlyhy.github.io/posts/2017-06-06-angularjs22/</guid>
      <description>架构
8个部分：
 模块（Modules） 组件 (Components) 模板 (Templates) 元数据 (Metadata) 数据绑定 (Data Binding) 指令 (Directives) 服务 (Services) 依赖注入 (Dependency Injection)  一、模块 （MOdules）    模块用于执行一个简单的任务，Angular 应用是由模块化的，它有自己的模块系统：NgModules。每个 Angular 应该至少要有一个模块(根模块)，一般可以命名为：AppModule。
Angular 模块是一个带有 @NgModule 装饰器的类，它接收一个用来描述模块属性的元数据对象。
@NgModule的几个重要属性：
 declarations：视图类属于这个模块，三种视图类：组件、指令、管道 exports：declaration的子集，可用于其它模块中的组件模板 imports：本模块组件模板中需要由其它导出类的模块 providers：服务的创建者 bootstrap：应用的主视图，根组件，只有根模块设置  引导根模块来启动应用，通常在main.ts 文件中来引导 AppModule
import { platformBrowserDynamic } from &#39;@angular/platform-browser-dynamic&#39;;
import { AppModule } from &#39;./app.module&#39;; platformBrowserDynamic().bootstrapModule(AppModule);
二、组件 （Components）    组件是一个模板的控制类用于处理应用和逻辑页面的视图部分
创建组件有三步：
 从 @angular/core 中引入 Component 修饰器 建立一个普通的类，并用 @Component 修饰它 在 @Component 中，设置 selector 自定义标签，以及 template 模板  三、模板（Templates）    模板的默认语言是HTML,通过模板定义组件的视图告诉Angualr怎么显示组件，简单讲就是用户能看到啥，默认使用双大括号作为插值语法，大括号中间的值通常是一个组件属性的变量名。 模板是包在反引号（`）中的多行字符串，不是单引号！！！！！！</description>
    </item>
    
    <item>
      <title>菜鸟教程AngularJS2教程笔记（四）</title>
      <link>http://onlyhy.github.io/posts/2017-06-06-angularjs24/</link>
      <pubDate>Tue, 06 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>http://onlyhy.github.io/posts/2017-06-06-angularjs24/</guid>
      <description>模板语法    模板简单讲就是用户能看到的东西。
HTML    模板的语言，除了 script 元素是被禁用的外 ，其他 HTML 元素都是支持的。
插值表达式    {{ &amp;hellip; }}，可以把计算的字符串插入HTML中，也可以作为属性值来使用。
模板表达式    {{ &amp;hellip; }} 里头其实就是一个模板表达式，Angular 会对其进行求值并转化为字符串输出，可以使用getval()来获取这个表达式的值。
模板表达式类似 JavaScript 的语言，但有些是禁止的
 赋值表达式（=，+=，-=&amp;hellip;） new操作符 带有;或者&amp;rsquo;的连接表达式 自增和自减操作（++和&amp;ndash;） 不支持位运算符（|和&amp;amp;） 模板表达式的操作符，如|和?.等，被赋予了新的含义  属性绑定    &amp;lt;img [src]=&amp;quot;imageUrl&amp;quot;&amp;gt;
&amp;lt;button [disabled]=&amp;quot;isUnchanged&amp;quot;&amp;gt;按钮是禁用的&amp;lt;/button&amp;gt;
&amp;lt;div [ngClass]=&amp;quot;classes&amp;quot;&amp;gt;[ngClass]绑定到classes 属性&amp;lt;/div&amp;gt; 
user-detail [user]=&amp;quot;currentUser&amp;quot;&amp;gt;&amp;lt;/user-detail&amp;gt;&amp;lt;//自定义组件的属性（这是父子组件间通讯的重要途径）
属性(Attribute)绑定    当元素没有属性可绑的时候，使用HTML标签属性(Attribute)绑定
HTML标签特性绑定在语法上类似于属性绑定，但中括号中的部分不是一个元素的属性名，而是由一个attr.的前缀和HTML标签属性的名称组成.
 &amp;lt;tr&amp;gt;&amp;lt;td [attr.colspan]=&amp;quot;1 + 1&amp;quot;&amp;gt;One-Two&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;  css类绑定    方括号中的部分不是一个元素的属性名，而是包括一个 class 前缀，紧跟着一个点 (.</description>
    </item>
    
    <item>
      <title>菜鸟教程AngularJS文档小结（1）</title>
      <link>http://onlyhy.github.io/posts/2017-06-05-angularjs%E5%B0%8F%E7%BB%931/</link>
      <pubDate>Mon, 05 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>http://onlyhy.github.io/posts/2017-06-05-angularjs%E5%B0%8F%E7%BB%931/</guid>
      <description>叽里咕噜    哇，之前的笔记好写了多字哇 ，简单点，笔记的方式简单点
参考手册    http://www.runoob.com/angularjs/angularjs-reference.html
简介    扩展HTML    AngularJS 通过 ng-directives 扩展了 HTML。 ng-app 指令定义一个 AngularJS 应用程序。 ng-model 指令把元素值（比如输入域的值）绑定到应用程序。 ng-bind 指令把应用程序数据绑定到 HTML 视图。
AngularJS是啥    AngularJS 把应用程序数据绑定到 HTML 元素。 AngularJS 可以克隆和重复 HTML 元素。 AngularJS 可以隐藏和显示 HTML 元素。 AngularJS 可以在 HTML 元素&amp;quot;背后&amp;quot;添加代码。 AngularJS 支持输入验证
指令    是指以ng作为前缀的HTML属性。 H5允许扩展的属性以data-开头，AngularJS属性以ng-开头，ng-data-让网页对H5有效。
表达式    使用表达式把数据绑定到HTML,与ng-bind有异曲同工之妙，写在双大括号内，很像JS表达式，可以包含文字、运算符、变量.
应用    View(视图)，即HTML Model(模型)，当前视图中可用的数据 AngularJS 模块（Module） 定义了 AngularJS 应用。 一个网页可以包含多个运行在不同元素中的AngualrJS应用程序</description>
    </item>
    
    <item>
      <title>菜鸟教程AngularJS文档小结（2）</title>
      <link>http://onlyhy.github.io/posts/2017-06-05-angularjs%E5%B0%8F%E7%BB%932/</link>
      <pubDate>Mon, 05 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>http://onlyhy.github.io/posts/2017-06-05-angularjs%E5%B0%8F%E7%BB%932/</guid>
      <description>参考手册    http://www.runoob.com/angularjs/angularjs-reference.html
表单    是输入控件的集合，控件如input,select,button,textarea等。
数据绑定    使用ng-model指令实现数据绑定
&amp;lt;input type=&amp;quot;text&amp;quot; ng-model=&amp;quot;firstname&amp;quot;&amp;gt; var app = angular.module(&#39;myApp&#39;, []); app.controller(&#39;formCtrl&#39;, function($scope) { $scope.firstname = &amp;quot;John&amp;quot;; });  ng-model与复选框、单选框结合使用，
输入验证    客户端和服务器端的验证都是必须的。
表单属性novalidate用于禁用浏览器默认的验证
&amp;lt;span style=&amp;quot;color:red&amp;quot; ng-show=&amp;quot;myForm.email.$dirty &amp;amp;&amp;amp; myForm.email.$invalid&amp;quot;&amp;gt; &amp;lt;span ng-show=&amp;quot;myForm.email.$error.required&amp;quot;&amp;gt;邮箱是必须的。&amp;lt;/span&amp;gt; &amp;lt;span ng-show=&amp;quot;myForm.email.$error.email&amp;quot;&amp;gt;非法的邮箱。&amp;lt;/span&amp;gt; &amp;lt;/span&amp;gt; &amp;lt;input type=&amp;quot;submit&amp;quot; ng-disabled=&amp;quot;myForm.user.$dirty &amp;amp;&amp;amp; myForm.user.$invalid || myForm.email.$dirty &amp;amp;&amp;amp; myForm.email.$invalid&amp;quot;&amp;gt;    属性 描述   $dirty 表单有填写记录   $valid 字段内容合法   $invalid 字段内容非法   $pristine 表单没有填写记录   API(Application Programming Interface应用程序编程接口)    常用于比较对象，迭代对象，转换对象</description>
    </item>
    
    <item>
      <title>AngularJS学习笔记（六）</title>
      <link>http://onlyhy.github.io/posts/2017-06-04-angularjs6/</link>
      <pubDate>Sun, 04 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>http://onlyhy.github.io/posts/2017-06-04-angularjs6/</guid>
      <description>模板语法    模板中HTML    script元素被禁用，html,body,base元素无意义，剩下的元素基本一样用。
插值表达式 （{{&amp;hellip;}}）    一般，括号间的素材是一个模板表达式，Angular先对它求值，再将其转换成字符串。
模板表达式    产生一个值，将它赋给绑定目标的属性，如{{1+1}}的模板表达式就是1+1。
所用语言看起来像JS，但有些是被禁止的，包括：
 赋值（=，+=，-=，&amp;hellip;） new运算符 使用;或,的链式表达式 自增或自减操作符 和JS语法显著不同： 不支持位运算 有新的模板表达式运算符  表达式上下文    典型的表达式上下文就是这个组件实例，是各种绑定值的来源。也可包括组件之外的对象，如模板输入量和模板引用变量。 表达式上下文变量是由模板变量、指令的上下文变量和组件的成员变量叠加而成。引用变量名时，模板变量最优先，其次是上下文变量，最后是组件的成员。
模板表达式不能引用全局命名空间中的任何东西，只能引用表达式上下文中的成员。
表达式指南     没有可见的副作用 执行迅速 非常简单 幂等性  没有可见的副作用    除了目标属性的值以外，不应该改变应用的任何状态。
执行迅速    表达式应快速结束，计算代价较高时，应考虑缓存那些从其它值计算得出的值。
非常简单    常规是属性名或方法调用，应在组件中实现应用和业务逻辑。
幂等性    最好使用幂等的表达式，幂等表达式总是返回完全相同的东西，直到某个依赖值发生改变。
模板语句    响应由绑定目标触发的事件，出现在=号右侧的引号中。 语言也像JS，但是它支持基本赋值（=）和表达式链（;和，）</description>
    </item>
    
    <item>
      <title>AngularJS学习笔记（五）</title>
      <link>http://onlyhy.github.io/posts/2017-06-03-angularjs5/</link>
      <pubDate>Sat, 03 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>http://onlyhy.github.io/posts/2017-06-03-angularjs5/</guid>
      <description>依赖注入    依赖注入系统能够即时创建和交付所依赖的服务，是重要的程序设计模式，简称为DI(Dependency Injection)。 依赖注入是一种编程模式，让类从外部源中获得依赖，不必亲自创建它们。 Angular附带了自己的依赖注入框架，此框架也能被当做独立模块用于其它应用和框架中。
配置注入器    自动创建了一个应用级注入器，必须通过注册提供商来配置注入器，提供商为应用创建所需服务。在NgModule中或者应用组件中注册提供商。
在NgModule中注册提供商    在AppModule中的providers中注册，如：
providers: [ UserService, { provide: APP_CONFIG, useValue: HERO_DI_CONFIG } ],  在组件中注册提供商    在HerosComponent中，注册到providers数组中。
@Component({ selector: &#39;my-heroes&#39;, providers: [HeroService], template: ` &amp;lt;h2&amp;gt;Heroes&amp;lt;/h2&amp;gt; &amp;lt;hero-list&amp;gt;&amp;lt;/hero-list&amp;gt; ` })  不同位置注册的区别    在NgModule中时被注册到根注入器，可以被整个应用访问，而在应用组件中注册的只在该组件及其子组件中可用。
为注入准备HeroListComponent    HeroListComponent 应该从注入的HeroService获取数据。组件必须在它的构造函数中请求这些服务。
constructor(heroService: HeroService) { this.heroes = heroService.getHeroes(); }  隐式注入器的创建    单例服务    在一个注入器的范围内，依赖都是单例的。不过嵌套的注入器可以创建它们自己的服务实例。</description>
    </item>
    
    <item>
      <title>AngularJS学习笔记（四）</title>
      <link>http://onlyhy.github.io/posts/2017-06-03-angularjs4/</link>
      <pubDate>Sat, 03 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>http://onlyhy.github.io/posts/2017-06-03-angularjs4/</guid>
      <description>###表单 表单协调一组数据绑定控件，跟踪变更，验证输入的有效性，显示错误信息。
模板驱动的表单    本例必填字段在左侧有绿色的竖条用于分辨，醒目的红色样式显示验证错误等。
 创建Hero模型类 创建控制此表单的组件。 创建具有初始表单布局的模板。 使用ngModel双向数据绑定语法把数据属性绑定到每个表单输入控件。 往每个表单输入控件上添加name属性 (attribute)。 添加自定义 CSS 来提供视觉反馈。 显示和隐藏有效性验证的错误信息。 使用 ngSubmit 处理表单提交。 禁用此表单的提交按钮，直到表单变为有效。  搭建    创建Hero模型类    最简单的模型是个“属性包”，存放应用中一件事物的事实。
export class Hero { constructor( public id: number, public name: string, public power: string, public alterEgo?: string //可选的属性 ) { } }  创建新英雄：
let myHero = new Hero(42, &#39;SkyDog&#39;, &#39;Fetch any object at any distance&#39;, &#39;Leslie Rollover&#39;); console.</description>
    </item>
    
    <item>
      <title>AngularJS学习笔记（一）</title>
      <link>http://onlyhy.github.io/posts/2017-06-02-angularjs1/</link>
      <pubDate>Fri, 02 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>http://onlyhy.github.io/posts/2017-06-02-angularjs1/</guid>
      <description>起步      设置开发环境
安装node.js和npm，然后全局安装Angular CLI，执行npm install -g @angular/cli
  创建新项目
ng new my-app
  启动开发服务器
cd my-app
ng serve --open
  编辑组件
CLI为我们创建了第一个Angular组件,它就是名叫app-root的根组件.在./src/app/app.component.ts目录下找到它。打开这个组件文件，可修改title属性，浏览器会自动刷新。
打开 src/app/app.component.css 可以给这个组件设置一些样式.
  开发环境    克隆或者下载《快速起步》种子
架构    Angular 是一个用 HTML 和 JavaScript 或者一个可以编译成 JavaScript 的语言（例如 Dart 或者 TypeScript ），来构建客户端应用的框架。
用 Angular 扩展语法编写 HTML 模板， 用组件类管理这些模板，用服务添加应用逻辑， 用模块打包发布组件与服务。
然后，我们通过引导根模块来启动该应用。 Angular 在浏览器中接管、展现应用的内容，并根据我们提供的操作指令响应用户的交互。
共8个主要构造块：模块 (module)，组件 (component)，模板 (template)，元数据 (metadata)，数据绑定 (data binding)，指令 (directive)，服务 (service)，依赖注入 (dependency injection)</description>
    </item>
    
    <item>
      <title>AngularJS学习笔记（三）</title>
      <link>http://onlyhy.github.io/posts/2017-06-02-angularjs3/</link>
      <pubDate>Fri, 02 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>http://onlyhy.github.io/posts/2017-06-02-angularjs3/</guid>
      <description>用户输入    用户输入触发 DOM 事件。通过事件绑定来监听它们，把更新过的数据导入回我们的组件和 model。
绑定到用户输入事件    要绑定 DOM 事件，只要把 DOM 事件的名字包裹在圆括号中，然后用放在引号中的模板语句对它赋值就可以。
&amp;lt;button (click)=&amp;quot;onClickMe()&amp;quot;&amp;gt;Click me!&amp;lt;/button&amp;gt;  通过 $event 对象取得用户输入    $event对象的属性取决于 DOM 事件的类型,所有标准DOM事件对象都有一个target属性，引用触发该事件的元素。event.target.value返回该元素的当前内容。event.key可替代event.target.value，积累各个按键本身。
$event是有类型的，如onkey(event:any){}或者onkey(event:keyboardEvent){}
传入$event违反了模板（用户看到的）和组件（应用如何处理用户数据）之间的分离关注原则。
从一个模板引用变量中获得用户输入    使用模板引用变量，这些变量提供了从模板中直接访问元素的能力，在标识符前加上井号（#）就能声明一个模板引用变量。
@Component({ selector: &#39;loop-back&#39;, template: ` &amp;lt;input #box (keyup)=&amp;quot;0&amp;quot;&amp;gt; &amp;lt;p&amp;gt;{{box.value}}&amp;lt;/p&amp;gt; ` })  本例将keyup事件绑定到了数字0，只有在应用做了异步事件，Angular才更新绑定。
按键事件过滤（key.enter）    可以检查每个$event.keyCode，更简单的是绑定到Angular的keyup.enter模拟事件，在用户按指定键时，才调用事件处理器。
失去焦点事件（blur）    同时监听输入框的回车键和失去焦点事件。
@Component({ selector: &#39;key-up4&#39;, template: ` &amp;lt;input #box (keyup.enter)=&amp;quot;update(box.value)&amp;quot; (blur)=&amp;quot;update(box.value)&amp;quot;&amp;gt; &amp;lt;p&amp;gt;{{value}}&amp;lt;/p&amp;gt; ` }) export class KeyUpComponent_v4 { value = &#39;&#39;; update(value: string) { this.</description>
    </item>
    
    <item>
      <title>AngularJS学习笔记（二）</title>
      <link>http://onlyhy.github.io/posts/2017-06-02-angularjs2/</link>
      <pubDate>Fri, 02 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>http://onlyhy.github.io/posts/2017-06-02-angularjs2/</guid>
      <description>一、根模块    Angular 模块类描述应用的部件是如何组合在一起的。
每个应用都至少有一个 Angular 模块，也就是根模块，用来引导并运行应用，常规名字为AppModule。
@NgModule装饰器将AppModule标记为 Angular 模块类（也叫NgModule类）。 @NgModule接受一个元数据对象，告诉 Angular 如何编译和启动应用。
import { NgModule } from &#39;@angular/core&#39;; import { BrowserModule } from &#39;@angular/platform-browser&#39;; import { AppComponent } from &#39;./app.component&#39;; @NgModule({ imports: [ BrowserModule ], declarations: [ AppComponent ], bootstrap: [ AppComponent ] }) export class AppModule { }  imports数组    当应用需要模块的特性时，将其添加到imports数组中，每个浏览器中运行的应用都需要@angular/platform-browser里的BrowserModule。 所以每个这样的应用都在其根AppModule的imports数组中包含BrowserModule。
imports数组中应该只有NgModule类。不要放置其它类型的类。
import语句与imports数组是完全不同的两个概念，import语句声明允许你访问在其他文件中导出的符号，imports数组是@NgModule元数据中独有的。
declarations数组    告诉 Angular 哪个组件属于AppModule，必须在一个NgModule类声明每一个组件，否则报错。
只有可以声明的 — 组件、指令和管道 — 属于declarations数组。 不要将其他类型的类添加到declarations中，例如NgModule类, 服务类，模型类。</description>
    </item>
    
  </channel>
</rss>
